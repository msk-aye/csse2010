
Assignment 2 Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  000027b8  0000284c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c8  008002ee  008002ee  00002a3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00002ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034c3  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001282  00000000  00000000  0000628b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020d1  00000000  00000000  0000750d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000860  00000000  00000000  000095e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da6  00000000  00000000  00009e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020e8  00000000  00000000  0000abe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000ccce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 01 	jmp	0x226	; 0x226 <__ctors_end>
       4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
       8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
       c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      10:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_5>
      18:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      1c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      20:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      24:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      28:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      2c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      30:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      34:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      38:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      3c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      40:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__vector_16>
      44:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      48:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      4c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      50:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_20>
      54:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_21>
      58:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      5c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      60:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      64:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      68:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      6c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      70:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      74:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      78:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2349>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2347>:
      a4:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b4:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000c2 <__c.2345>:
      c2:	50 4c 41 59 45 52 20 25 64 20 57 49 4e 53 21 21     PLAYER %d WINS!!
      d2:	21 00                                               !.

000000d4 <__c.2334>:
      d4:	25 64 00                                            %d.

000000d7 <__c.2332>:
      d7:	44 69 63 65 20 76 61 6c 75 65 3a 20 25 64 00        Dice value: %d.

000000e6 <__c.2330>:
      e6:	25 64 20 2e 20 25 64 20 73 00                       %d . %d s.

000000f0 <__c.2328>:
      f0:	25 64 20 2e 20 25 64 20 73 00                       %d . %d s.

000000fa <__c.2324>:
      fa:	50 6c 61 79 65 72 20 32 20 74 69 6d 65 20 72 65     Player 2 time re
     10a:	6d 61 69 6e 69 6e 67 3a 20 25 64 20 73 00           maining: %d s.

00000118 <__c.2322>:
     118:	25 64 20 73 00                                      %d s.

0000011d <__c.2320>:
     11d:	50 6c 61 79 65 72 20 31 20 74 69 6d 65 20 72 65     Player 1 time re
     12d:	6d 61 69 6e 69 6e 67 3a 20 25 64 20 73 00           maining: %d s.

0000013b <__c.2318>:
     13b:	25 64 20 2e 20 25 64 20 73 00                       %d . %d s.

00000145 <__c.2316>:
     145:	25 64 20 73 00                                      %d s.

0000014a <__c.2314>:
     14a:	54 69 6d 65 20 72 65 6d 61 69 6e 69 6e 67 3a 20     Time remaining: 
     15a:	25 64 20 73 00                                      %d s.

0000015f <__c.2287>:
     15f:	25 64 00                                            %d.

00000162 <__c.2283>:
     162:	53 65 6c 65 63 74 65 64 20 42 6f 61 72 64 20 28     Selected Board (
     172:	70 72 65 73 73 20 42 20 74 6f 20 63 68 61 6e 67     press B to chang
     182:	65 29 3a 20 42 6f 61 72 64 20 25 64 00              e): Board %d.

0000018f <__c.2281>:
     18f:	53 74 61 72 74 20 67 61 6d 65 20 62 79 20 70 72     Start game by pr
     19f:	65 73 73 69 6e 67 20 31 20 28 66 6f 72 20 31 20     essing 1 (for 1 
     1af:	70 6c 61 79 65 72 29 20 6f 72 20 32 09 28 66 6f     player) or 2.(fo
     1bf:	72 20 32 20 70 6c 61 79 65 72 29 00                 r 2 player).

000001cb <__c.2279>:
     1cb:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
     1db:	20 62 79 20 4d 75 68 61 6d 6d 61 64 20 53 75 6c      by Muhammad Sul
     1eb:	61 6d 61 6e 20 4b 68 61 6e 20 2d 20 73 34 37 35     aman Khan - s475
     1fb:	31 31 39 32 00                                      1192.

00000200 <__c.2277>:
     200:	53 6e 61 6b 65 73 20 61 6e 64 20 4c 61 64 64 65     Snakes and Ladde
     210:	72 73 00                                            rs.

00000213 <__c.2045>:
     213:	1b 5b 4b 00                                         .[K.

00000217 <__c.2040>:
     217:	1b 5b 32 4a 00                                      .[2J.

0000021c <__c.2025>:
     21c:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d8 e0       	ldi	r29, 0x08	; 8
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	12 e0       	ldi	r17, 0x02	; 2
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	e8 eb       	ldi	r30, 0xB8	; 184
     23a:	f7 e2       	ldi	r31, 0x27	; 39
     23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x10>
     23e:	05 90       	lpm	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	ae 3e       	cpi	r26, 0xEE	; 238
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0xc>

00000248 <__do_clear_bss>:
     248:	24 e0       	ldi	r18, 0x04	; 4
     24a:	ae ee       	ldi	r26, 0xEE	; 238
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a6 3b       	cpi	r26, 0xB6	; 182
     254:	b2 07       	cpc	r27, r18
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
     258:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <main>
     25c:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <_exit>

00000260 <__bad_interrupt>:
     260:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000264 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     264:	e8 e6       	ldi	r30, 0x68	; 104
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     26e:	8b b3       	in	r24, 0x1b	; 27
     270:	82 60       	ori	r24, 0x02	; 2
     272:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     274:	ec e6       	ldi	r30, 0x6C	; 108
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8f 60       	ori	r24, 0x0F	; 15
     27c:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     27e:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <__data_end>
     282:	08 95       	ret

00000284 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     284:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <__data_end>
     288:	18 16       	cp	r1, r24
     28a:	14 f5       	brge	.+68     	; 0x2d0 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     28c:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     290:	6f b7       	in	r22, 0x3f	; 63
		cli();
     292:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	09 c0       	rjmp	.+18     	; 0x2aa <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     298:	f9 01       	movw	r30, r18
     29a:	e1 51       	subi	r30, 0x11	; 17
     29c:	fd 4f       	sbci	r31, 0xFD	; 253
     29e:	40 81       	ld	r20, Z
     2a0:	f9 01       	movw	r30, r18
     2a2:	e2 51       	subi	r30, 0x12	; 18
     2a4:	fd 4f       	sbci	r31, 0xFD	; 253
     2a6:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2a8:	9f 5f       	subi	r25, 0xFF	; 255
     2aa:	29 2f       	mov	r18, r25
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <__data_end>
     2b2:	04 2e       	mov	r0, r20
     2b4:	00 0c       	add	r0, r0
     2b6:	55 0b       	sbc	r21, r21
     2b8:	24 17       	cp	r18, r20
     2ba:	35 07       	cpc	r19, r21
     2bc:	6c f3       	brlt	.-38     	; 0x298 <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     2be:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <__data_end>
     2c2:	91 50       	subi	r25, 0x01	; 1
     2c4:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <__data_end>
		
		if(interrupts_were_enabled) {
     2c8:	66 23       	and	r22, r22
     2ca:	1c f4       	brge	.+6      	; 0x2d2 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     2cc:	78 94       	sei
     2ce:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2d2:	08 95       	ret

000002d4 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
     2e8:	ef 93       	push	r30
     2ea:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2ec:	43 b1       	in	r20, 0x03	; 3
     2ee:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	26 c0       	rjmp	.+76     	; 0x340 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2f4:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <__data_end>
     2f8:	94 30       	cpi	r25, 0x04	; 4
     2fa:	0c f5       	brge	.+66     	; 0x33e <__vector_5+0x6a>
     2fc:	24 2f       	mov	r18, r20
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	08 2e       	mov	r0, r24
     302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_5+0x34>
     304:	35 95       	asr	r19
     306:	27 95       	ror	r18
     308:	0a 94       	dec	r0
     30a:	e2 f7       	brpl	.-8      	; 0x304 <__vector_5+0x30>
     30c:	20 ff       	sbrs	r18, 0
     30e:	17 c0       	rjmp	.+46     	; 0x33e <__vector_5+0x6a>
				(button_state & (1 << pin)) && 
				!(last_button_state & (1 << pin))) {
     310:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <last_button_state>
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	08 2e       	mov	r0, r24
     318:	02 c0       	rjmp	.+4      	; 0x31e <__vector_5+0x4a>
     31a:	35 95       	asr	r19
     31c:	27 95       	ror	r18
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1 << pin)) && 
     322:	20 fd       	sbrc	r18, 0
     324:	0c c0       	rjmp	.+24     	; 0x33e <__vector_5+0x6a>
				!(last_button_state & (1 << pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     326:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <__data_end>
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9e 0f       	add	r25, r30
     32e:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <__data_end>
     332:	0e 2e       	mov	r0, r30
     334:	00 0c       	add	r0, r0
     336:	ff 0b       	sbc	r31, r31
     338:	e1 51       	subi	r30, 0x11	; 17
     33a:	fd 4f       	sbci	r31, 0xFD	; 253
     33c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     33e:	8f 5f       	subi	r24, 0xFF	; 255
     340:	84 30       	cpi	r24, 0x04	; 4
     342:	c0 f2       	brcs	.-80     	; 0x2f4 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     344:	40 93 f3 02 	sts	0x02F3, r20	; 0x8002f3 <last_button_state>
     348:	ff 91       	pop	r31
     34a:	ef 91       	pop	r30
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	4f 91       	pop	r20
     352:	3f 91       	pop	r19
     354:	2f 91       	pop	r18
     356:	0f 90       	pop	r0
     358:	0f be       	out	0x3f, r0	; 63
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <initialise_display>:

// constant value used to display 'SNKLD' on launch
static const uint8_t snkld_display[MATRIX_NUM_COLUMNS] = 
		{117, 85, 93, 124, 64, 124, 125, 17, 109, 0, 124, 4, 4, 125, 69, 57};

void initialise_display(void) {
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	28 97       	sbiw	r28, 0x08	; 8
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     378:	0e 94 ae 07 	call	0xf5c	; 0xf5c <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	08 c0       	rjmp	.+16     	; 0x392 <initialise_display+0x32>
		col_colours[row] = MATRIX_COLOUR_EMPTY;
     382:	e1 e0       	ldi	r30, 0x01	; 1
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	ec 0f       	add	r30, r28
     388:	fd 1f       	adc	r31, r29
     38a:	e8 0f       	add	r30, r24
     38c:	f9 1f       	adc	r31, r25
     38e:	10 82       	st	Z, r1
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	88 30       	cpi	r24, 0x08	; 8
     394:	91 05       	cpc	r25, r1
     396:	ac f3       	brlt	.-22     	; 0x382 <initialise_display+0x22>
     398:	08 e0       	ldi	r16, 0x08	; 8
     39a:	10 e0       	ldi	r17, 0x00	; 0
     39c:	08 c0       	rjmp	.+16     	; 0x3ae <initialise_display+0x4e>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
		ledmatrix_update_column(x, col_colours);
     39e:	be 01       	movw	r22, r28
     3a0:	6f 5f       	subi	r22, 0xFF	; 255
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	80 2f       	mov	r24, r16
     3a6:	0e 94 91 07 	call	0xf22	; 0xf22 <ledmatrix_update_column>
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
     3aa:	0f 5f       	subi	r16, 0xFF	; 255
     3ac:	1f 4f       	sbci	r17, 0xFF	; 255
     3ae:	00 31       	cpi	r16, 0x10	; 16
     3b0:	11 05       	cpc	r17, r1
     3b2:	ac f3       	brlt	.-22     	; 0x39e <initialise_display+0x3e>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
	
	// create an array with the background colour at every position
	PixelColour row_colours[MATRIX_NUM_COLUMNS];
	for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	80 31       	cpi	r24, 0x10	; 16
     3be:	91 05       	cpc	r25, r1
     3c0:	e4 f3       	brlt	.-8      	; 0x3ba <initialise_display+0x5a>

	// and add the bounds on the right
	for (int y = MATRIX_Y_OFFSET + HEIGHT; y < MATRIX_NUM_ROWS; y++) {
		ledmatrix_update_row(y, row_colours);
	}
}
     3c2:	28 96       	adiw	r28, 0x08	; 8
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <start_display>:

void start_display(void) {
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	28 97       	sbiw	r28, 0x08	; 8
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     3ee:	0e 94 ae 07 	call	0xf5c	; 0xf5c <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	29 c0       	rjmp	.+82     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		col_data = snkld_display[col];
     3f6:	e1 2f       	mov	r30, r17
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ef 5d       	subi	r30, 0xDF	; 223
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     400:	90 ff       	sbrs	r25, 0
     402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			colour = COLOUR_RED;
     404:	2f e0       	ldi	r18, 0x0F	; 15
     406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		} else {
			colour = COLOUR_GREEN;
     408:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     40a:	87 e0       	ldi	r24, 0x07	; 7
     40c:	13 c0       	rjmp	.+38     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     40e:	99 23       	and	r25, r25
     410:	44 f4       	brge	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				column_colour_data[i] = colour;
     412:	e1 e0       	ldi	r30, 0x01	; 1
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ec 0f       	add	r30, r28
     418:	fd 1f       	adc	r31, r29
     41a:	e8 0f       	add	r30, r24
     41c:	f1 1d       	adc	r31, r1
     41e:	20 83       	st	Z, r18
     420:	07 c0       	rjmp	.+14     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			} else {
				column_colour_data[i] = 0;
     422:	e1 e0       	ldi	r30, 0x01	; 1
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	ec 0f       	add	r30, r28
     428:	fd 1f       	adc	r31, r29
     42a:	e8 0f       	add	r30, r24
     42c:	f1 1d       	adc	r31, r1
     42e:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     430:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     432:	81 50       	subi	r24, 0x01	; 1
     434:	81 11       	cpse	r24, r1
     436:	eb cf       	rjmp	.-42     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     438:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	81 2f       	mov	r24, r17
     442:	0e 94 91 07 	call	0xf22	; 0xf22 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     446:	1f 5f       	subi	r17, 0xFF	; 255
     448:	10 31       	cpi	r17, 0x10	; 16
     44a:	a8 f2       	brcs	.-86     	; 0x3f6 <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     44c:	28 96       	adiw	r28, 0x08	; 8
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	08 95       	ret

00000460 <update_square_colour>:

// Update the square colour to the display. The object passed can be the object
// type or an object instance (which additionally has an ID number if 
// applicable -see get_object_type in game.c/h)
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	d8 2f       	mov	r29, r24
     466:	c6 2f       	mov	r28, r22
     468:	84 2f       	mov	r24, r20
	// determine which colour corresponds to this object
	PixelColour colour;
	object = get_object_type(object);
     46a:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
	
	switch (object) {
     46e:	80 38       	cpi	r24, 0x80	; 128
     470:	f1 f0       	breq	.+60     	; 0x4ae <update_square_colour+0x4e>
     472:	58 f4       	brcc	.+22     	; 0x48a <update_square_colour+0x2a>
     474:	80 32       	cpi	r24, 0x20	; 32
     476:	f9 f0       	breq	.+62     	; 0x4b6 <update_square_colour+0x56>
     478:	18 f4       	brcc	.+6      	; 0x480 <update_square_colour+0x20>
     47a:	80 31       	cpi	r24, 0x10	; 16
     47c:	e1 f0       	breq	.+56     	; 0x4b6 <update_square_colour+0x56>
     47e:	11 c0       	rjmp	.+34     	; 0x4a2 <update_square_colour+0x42>
     480:	80 34       	cpi	r24, 0x40	; 64
     482:	89 f0       	breq	.+34     	; 0x4a6 <update_square_colour+0x46>
     484:	80 35       	cpi	r24, 0x50	; 80
     486:	89 f0       	breq	.+34     	; 0x4aa <update_square_colour+0x4a>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <update_square_colour+0x42>
     48a:	80 3c       	cpi	r24, 0xC0	; 192
     48c:	91 f0       	breq	.+36     	; 0x4b2 <update_square_colour+0x52>
     48e:	28 f4       	brcc	.+10     	; 0x49a <update_square_colour+0x3a>
     490:	80 39       	cpi	r24, 0x90	; 144
     492:	69 f0       	breq	.+26     	; 0x4ae <update_square_colour+0x4e>
     494:	80 3a       	cpi	r24, 0xA0	; 160
     496:	59 f0       	breq	.+22     	; 0x4ae <update_square_colour+0x4e>
     498:	04 c0       	rjmp	.+8      	; 0x4a2 <update_square_colour+0x42>
     49a:	80 3d       	cpi	r24, 0xD0	; 208
     49c:	51 f0       	breq	.+20     	; 0x4b2 <update_square_colour+0x52>
     49e:	80 3e       	cpi	r24, 0xE0	; 224
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <update_square_colour+0x52>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <update_square_colour+0x58>
		case START_POINT:	/* FALLTHROUGH */
		case FINISH_LINE:
			colour = MATRIX_COLOUR_START_END;
			break;
		case PLAYER_1:
			colour = MATRIX_COLOUR_P1;
     4a6:	4c e3       	ldi	r20, 0x3C	; 60
			break;
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <update_square_colour+0x58>
		case PLAYER_2:
			colour = MATRIX_COLOUR_P2;
     4aa:	43 e1       	ldi	r20, 0x13	; 19
			break;
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <update_square_colour+0x58>
			
		// All snakes should be the same colour
		case SNAKE_START:	/* FALLTHROUGH */
		case SNAKE_END:		/* FALLTHROUGH */
		case SNAKE_MIDDLE:
			colour = MATRIX_COLOUR_SNAKE;
     4ae:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <update_square_colour+0x58>
			
		// All ladders should be the same colour
		case LADDER_START:	/* FALLTHROUGH */
		case LADDER_END:	/* FALLTHROUGH */
		case LADDER_MIDDLE:
			colour = MATRIX_COLOUR_LADDER;
     4b2:	40 ef       	ldi	r20, 0xF0	; 240
			break;
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <update_square_colour+0x58>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case START_POINT:	/* FALLTHROUGH */
		case FINISH_LINE:
			colour = MATRIX_COLOUR_START_END;
     4b6:	45 e3       	ldi	r20, 0x35	; 53
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(y, WIDTH - 1 - x, colour);
     4b8:	67 e0       	ldi	r22, 0x07	; 7
     4ba:	6d 1b       	sub	r22, r29
     4bc:	8c 2f       	mov	r24, r28
     4be:	0e 94 72 07 	call	0xee4	; 0xee4 <ledmatrix_update_pixel>
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <get_two_players>:
	return player_x;
}

uint8_t get_player_y(void) {
	return player_y;
}
     4c8:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     4cc:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     4d0:	08 95       	ret

000004d2 <set_two_players>:
     4d2:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <two_players+0x1>
     4d6:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <two_players>
     4da:	08 95       	ret

000004dc <get_player_2_turn>:
     4dc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     4e0:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     4e4:	08 95       	ret

000004e6 <get_object_at>:
     4e6:	88 30       	cpi	r24, 0x08	; 8
     4e8:	60 f4       	brcc	.+24     	; 0x502 <get_object_at+0x1c>
     4ea:	60 31       	cpi	r22, 0x10	; 16
     4ec:	60 f4       	brcc	.+24     	; 0x506 <get_object_at+0x20>
     4ee:	90 e1       	ldi	r25, 0x10	; 16
     4f0:	89 9f       	mul	r24, r25
     4f2:	f0 01       	movw	r30, r0
     4f4:	11 24       	eor	r1, r1
     4f6:	ed 5f       	subi	r30, 0xFD	; 253
     4f8:	fc 4f       	sbci	r31, 0xFC	; 252
     4fa:	e6 0f       	add	r30, r22
     4fc:	f1 1d       	adc	r31, r1
     4fe:	80 81       	ld	r24, Z
     500:	08 95       	ret
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret

0000050a <get_object_type>:
     50a:	80 7f       	andi	r24, 0xF0	; 240
     50c:	08 95       	ret

0000050e <initialise_game>:
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	8c 01       	movw	r16, r24
     51c:	0e 94 b0 01 	call	0x360	; 0x360 <initialise_display>
     520:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <player_x>
     524:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <player_y>
     528:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <player_1_x>
     52c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <player_1_y>
     530:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <player_2_x>
     534:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <player_2_y>
     538:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <player_visible>
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
     540:	56 c0       	rjmp	.+172    	; 0x5ee <initialise_game+0xe0>
     542:	01 30       	cpi	r16, 0x01	; 1
     544:	11 05       	cpc	r17, r1
     546:	19 f5       	brne	.+70     	; 0x58e <initialise_game+0x80>
     548:	ef e0       	ldi	r30, 0x0F	; 15
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ec 1b       	sub	r30, r28
     54e:	fd 0b       	sbc	r31, r29
     550:	ee 0f       	add	r30, r30
     552:	ff 1f       	adc	r31, r31
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	ef 5c       	subi	r30, 0xCF	; 207
     55e:	fd 4f       	sbci	r31, 0xFD	; 253
     560:	ee 0d       	add	r30, r14
     562:	ff 1d       	adc	r31, r15
     564:	80 81       	ld	r24, Z
     566:	f7 01       	movw	r30, r14
     568:	e2 95       	swap	r30
     56a:	f2 95       	swap	r31
     56c:	f0 7f       	andi	r31, 0xF0	; 240
     56e:	fe 27       	eor	r31, r30
     570:	e0 7f       	andi	r30, 0xF0	; 240
     572:	fe 27       	eor	r31, r30
     574:	ed 5f       	subi	r30, 0xFD	; 253
     576:	fc 4f       	sbci	r31, 0xFC	; 252
     578:	ec 0f       	add	r30, r28
     57a:	fd 1f       	adc	r31, r29
     57c:	80 83       	st	Z, r24
     57e:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     582:	48 2f       	mov	r20, r24
     584:	6c 2f       	mov	r22, r28
     586:	8e 2d       	mov	r24, r14
     588:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     58c:	25 c0       	rjmp	.+74     	; 0x5d8 <initialise_game+0xca>
     58e:	02 30       	cpi	r16, 0x02	; 2
     590:	11 05       	cpc	r17, r1
     592:	11 f5       	brne	.+68     	; 0x5d8 <initialise_game+0xca>
     594:	ef e0       	ldi	r30, 0x0F	; 15
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	ec 1b       	sub	r30, r28
     59a:	fd 0b       	sbc	r31, r29
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	ef 54       	subi	r30, 0x4F	; 79
     5aa:	fe 4f       	sbci	r31, 0xFE	; 254
     5ac:	ee 0d       	add	r30, r14
     5ae:	ff 1d       	adc	r31, r15
     5b0:	80 81       	ld	r24, Z
     5b2:	f7 01       	movw	r30, r14
     5b4:	e2 95       	swap	r30
     5b6:	f2 95       	swap	r31
     5b8:	f0 7f       	andi	r31, 0xF0	; 240
     5ba:	fe 27       	eor	r31, r30
     5bc:	e0 7f       	andi	r30, 0xF0	; 240
     5be:	fe 27       	eor	r31, r30
     5c0:	ed 5f       	subi	r30, 0xFD	; 253
     5c2:	fc 4f       	sbci	r31, 0xFC	; 252
     5c4:	ec 0f       	add	r30, r28
     5c6:	fd 1f       	adc	r31, r29
     5c8:	80 83       	st	Z, r24
     5ca:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     5ce:	48 2f       	mov	r20, r24
     5d0:	6c 2f       	mov	r22, r28
     5d2:	8e 2d       	mov	r24, r14
     5d4:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     5d8:	21 96       	adiw	r28, 0x01	; 1
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <initialise_game+0xd2>
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	d0 e0       	ldi	r29, 0x00	; 0
     5e0:	c0 31       	cpi	r28, 0x10	; 16
     5e2:	d1 05       	cpc	r29, r1
     5e4:	0c f4       	brge	.+2      	; 0x5e8 <initialise_game+0xda>
     5e6:	ad cf       	rjmp	.-166    	; 0x542 <initialise_game+0x34>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	e8 1a       	sub	r14, r24
     5ec:	f8 0a       	sbc	r15, r24
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	e8 16       	cp	r14, r24
     5f2:	f1 04       	cpc	r15, r1
     5f4:	9c f3       	brlt	.-26     	; 0x5dc <initialise_game+0xce>
     5f6:	40 e4       	ldi	r20, 0x40	; 64
     5f8:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     5fc:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     600:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	08 95       	ret

00000612 <get_object_identifier>:
     612:	8f 70       	andi	r24, 0x0F	; 15
     614:	08 95       	ret

00000616 <check_snake_ladder>:

// Checks if player is on a snake or ladder and implements if needed
void check_snake_ladder(void) {
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
	brek =0;
     62c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <brek+0x1>
     630:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <brek>
	if (get_object_type(get_object_at(player_x, player_y)) == SNAKE_START) {
     634:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <player_y>
     638:	60 2f       	mov	r22, r16
     63a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     63e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_object_at>
     642:	c8 2f       	mov	r28, r24
     644:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     648:	80 38       	cpi	r24, 0x80	; 128
     64a:	09 f0       	breq	.+2      	; 0x64e <check_snake_ladder+0x38>
     64c:	8e c0       	rjmp	.+284    	; 0x76a <check_snake_ladder+0x154>
		int id = 0;
		id = get_object_identifier(get_object_at(player_x, player_y));
     64e:	8c 2f       	mov	r24, r28
     650:	0e 94 09 03 	call	0x612	; 0x612 <get_object_identifier>
     654:	a8 2e       	mov	r10, r24
					player_x = x;
					player_y = y;
				}
			}
		}*/
		for (int y = player_y; y >= 0; y--) {
     656:	00 2e       	mov	r0, r16
     658:	00 0c       	add	r0, r0
     65a:	11 0b       	sbc	r17, r17
     65c:	84 c0       	rjmp	.+264    	; 0x766 <check_snake_ladder+0x150>
			for (int x = -1; x <= 1; x++){
				if (get_object_type(get_object_at(player_x + x, y - 1)) == SNAKE_MIDDLE) {
     65e:	cc 2e       	mov	r12, r28
     660:	f0 90 f9 02 	lds	r15, 0x02F9	; 0x8002f9 <player_x>
     664:	bf 2c       	mov	r11, r15
     666:	6f ef       	ldi	r22, 0xFF	; 255
     668:	60 0f       	add	r22, r16
     66a:	8c 2f       	mov	r24, r28
     66c:	8f 0d       	add	r24, r15
     66e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_object_at>
     672:	d8 2e       	mov	r13, r24
     674:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     678:	e8 2e       	mov	r14, r24
     67a:	20 ea       	ldi	r18, 0xA0	; 160
     67c:	82 13       	cpse	r24, r18
     67e:	2d c0       	rjmp	.+90     	; 0x6da <check_snake_ladder+0xc4>
					update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     680:	e0 90 f8 02 	lds	r14, 0x02F8	; 0x8002f8 <player_y>
     684:	8f 2d       	mov	r24, r15
     686:	90 e1       	ldi	r25, 0x10	; 16
     688:	89 02       	muls	r24, r25
     68a:	f0 01       	movw	r30, r0
     68c:	11 24       	eor	r1, r1
     68e:	ed 5f       	subi	r30, 0xFD	; 253
     690:	fc 4f       	sbci	r31, 0xFC	; 252
     692:	ee 0d       	add	r30, r14
     694:	f1 1d       	adc	r31, r1
     696:	e7 fc       	sbrc	r14, 7
     698:	fa 95       	dec	r31
     69a:	80 81       	ld	r24, Z
     69c:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     6a0:	48 2f       	mov	r20, r24
     6a2:	6e 2d       	mov	r22, r14
     6a4:	8f 2d       	mov	r24, r15
     6a6:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
					player_x += x;
     6aa:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     6ae:	8c 0f       	add	r24, r28
     6b0:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
					player_y --;
     6b4:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     6b8:	61 50       	subi	r22, 0x01	; 1
     6ba:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
					update_square_colour(player_x, player_y, colour);
     6be:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c2:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c6:	8f e7       	ldi	r24, 0x7F	; 127
     6c8:	98 e3       	ldi	r25, 0x38	; 56
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	90 40       	sbci	r25, 0x00	; 0
     6d0:	20 40       	sbci	r18, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <check_snake_ladder+0xb6>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <check_snake_ladder+0xc0>
     6d6:	00 00       	nop
     6d8:	36 c0       	rjmp	.+108    	; 0x746 <check_snake_ladder+0x130>
					_delay_ms(50);
				} else if ((get_object_type(get_object_at(player_x + x, y - 1)) == SNAKE_END) & (get_object_identifier(get_object_at(player_x + x, y-1)) == id)) {
     6da:	8d 2d       	mov	r24, r13
     6dc:	0e 94 09 03 	call	0x612	; 0x612 <get_object_identifier>
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	90 e9       	ldi	r25, 0x90	; 144
     6e4:	e9 12       	cpse	r14, r25
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	a8 12       	cpse	r10, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	92 23       	and	r25, r18
     6f0:	51 f1       	breq	.+84     	; 0x746 <check_snake_ladder+0x130>
					update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     6f2:	c0 91 f8 02 	lds	r28, 0x02F8	; 0x8002f8 <player_y>
     6f6:	2f 2d       	mov	r18, r15
     6f8:	80 e1       	ldi	r24, 0x10	; 16
     6fa:	28 02       	muls	r18, r24
     6fc:	f0 01       	movw	r30, r0
     6fe:	11 24       	eor	r1, r1
     700:	ed 5f       	subi	r30, 0xFD	; 253
     702:	fc 4f       	sbci	r31, 0xFC	; 252
     704:	ec 0f       	add	r30, r28
     706:	f1 1d       	adc	r31, r1
     708:	c7 fd       	sbrc	r28, 7
     70a:	fa 95       	dec	r31
     70c:	80 81       	ld	r24, Z
     70e:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     712:	48 2f       	mov	r20, r24
     714:	6c 2f       	mov	r22, r28
     716:	8b 2d       	mov	r24, r11
     718:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
					player_x += x;
     71c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     720:	8c 0d       	add	r24, r12
     722:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
					player_y --;
     726:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     72a:	61 50       	subi	r22, 0x01	; 1
     72c:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
					update_square_colour(player_x, player_y, colour);
     730:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     734:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
					brek = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <brek+0x1>
     740:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <brek>
					break;
     744:	08 c0       	rjmp	.+16     	; 0x756 <check_snake_ladder+0x140>
					player_y = y;
				}
			}
		}*/
		for (int y = player_y; y >= 0; y--) {
			for (int x = -1; x <= 1; x++){
     746:	21 96       	adiw	r28, 0x01	; 1
     748:	02 c0       	rjmp	.+4      	; 0x74e <check_snake_ladder+0x138>
     74a:	cf ef       	ldi	r28, 0xFF	; 255
     74c:	df ef       	ldi	r29, 0xFF	; 255
     74e:	c2 30       	cpi	r28, 0x02	; 2
     750:	d1 05       	cpc	r29, r1
     752:	0c f4       	brge	.+2      	; 0x756 <check_snake_ladder+0x140>
     754:	84 cf       	rjmp	.-248    	; 0x65e <check_snake_ladder+0x48>
					update_square_colour(player_x, player_y, colour);
					brek = 1;
					break;
					}
			}
			if (brek) {
     756:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <brek>
     75a:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <brek+0x1>
     75e:	89 2b       	or	r24, r25
     760:	21 f4       	brne	.+8      	; 0x76a <check_snake_ladder+0x154>
					player_x = x;
					player_y = y;
				}
			}
		}*/
		for (int y = player_y; y >= 0; y--) {
     762:	01 50       	subi	r16, 0x01	; 1
     764:	11 09       	sbc	r17, r1
     766:	11 23       	and	r17, r17
     768:	84 f7       	brge	.-32     	; 0x74a <check_snake_ladder+0x134>
				break;
			}
			}
		}
	
	if (get_object_type(get_object_at(player_x, player_y)) == LADDER_START) {
     76a:	e0 90 f8 02 	lds	r14, 0x02F8	; 0x8002f8 <player_y>
     76e:	6e 2d       	mov	r22, r14
     770:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     774:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_object_at>
     778:	c8 2f       	mov	r28, r24
     77a:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     77e:	80 3c       	cpi	r24, 0xC0	; 192
     780:	09 f0       	breq	.+2      	; 0x784 <check_snake_ladder+0x16e>
     782:	84 c0       	rjmp	.+264    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
		int id;
		id = get_object_identifier(get_object_at(player_x, player_y));
     784:	8c 2f       	mov	r24, r28
     786:	0e 94 09 03 	call	0x612	; 0x612 <get_object_identifier>
     78a:	98 2e       	mov	r9, r24
					player_x = x;
					player_y = y;
				}
			}
		}*/
		for (int y = player_y; y <= 15; y++) {
     78c:	0e 2c       	mov	r0, r14
     78e:	00 0c       	add	r0, r0
     790:	ff 08       	sbc	r15, r15
     792:	78 c0       	rjmp	.+240    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
			for (int x = -1; x <= 1; x++){
				if (get_object_type(get_object_at(player_x + x, player_y + 1)) == LADDER_MIDDLE) {
     794:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <player_y>
     798:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <player_x>
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	60 0f       	add	r22, r16
     7a0:	8c 2f       	mov	r24, r28
     7a2:	81 0f       	add	r24, r17
     7a4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_object_at>
     7a8:	d8 2e       	mov	r13, r24
     7aa:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     7ae:	80 3e       	cpi	r24, 0xE0	; 224
     7b0:	51 f5       	brne	.+84     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
					update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     7b2:	90 e1       	ldi	r25, 0x10	; 16
     7b4:	19 02       	muls	r17, r25
     7b6:	f0 01       	movw	r30, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	ed 5f       	subi	r30, 0xFD	; 253
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	e0 0f       	add	r30, r16
     7c0:	f1 1d       	adc	r31, r1
     7c2:	07 fd       	sbrc	r16, 7
     7c4:	fa 95       	dec	r31
     7c6:	80 81       	ld	r24, Z
     7c8:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     7cc:	48 2f       	mov	r20, r24
     7ce:	60 2f       	mov	r22, r16
     7d0:	81 2f       	mov	r24, r17
     7d2:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
					player_x += x;
     7d6:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     7da:	8c 0f       	add	r24, r28
     7dc:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
					player_y ++;
     7e0:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
					update_square_colour(player_x, player_y, colour);
     7ea:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7ee:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     7f2:	8f e7       	ldi	r24, 0x7F	; 127
     7f4:	98 e3       	ldi	r25, 0x38	; 56
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	81 50       	subi	r24, 0x01	; 1
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	20 40       	sbci	r18, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <check_snake_ladder+0x1e2>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     802:	00 00       	nop
     804:	2e c0       	rjmp	.+92     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
					_delay_ms(50);
					} else if ((get_object_type(get_object_at(player_x + x, player_y + 1)) == LADDER_END) && (get_object_identifier(get_object_at(player_x + x, player_y+1)) == id)) {
     806:	80 3d       	cpi	r24, 0xD0	; 208
     808:	61 f5       	brne	.+88     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     80a:	8d 2d       	mov	r24, r13
     80c:	0e 94 09 03 	call	0x612	; 0x612 <get_object_identifier>
     810:	98 12       	cpse	r9, r24
     812:	27 c0       	rjmp	.+78     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
					update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     814:	80 e1       	ldi	r24, 0x10	; 16
     816:	18 02       	muls	r17, r24
     818:	f0 01       	movw	r30, r0
     81a:	11 24       	eor	r1, r1
     81c:	ed 5f       	subi	r30, 0xFD	; 253
     81e:	fc 4f       	sbci	r31, 0xFC	; 252
     820:	e0 0f       	add	r30, r16
     822:	f1 1d       	adc	r31, r1
     824:	07 fd       	sbrc	r16, 7
     826:	fa 95       	dec	r31
     828:	80 81       	ld	r24, Z
     82a:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     82e:	48 2f       	mov	r20, r24
     830:	60 2f       	mov	r22, r16
     832:	81 2f       	mov	r24, r17
     834:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
					player_x += x;
     838:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     83c:	8c 0f       	add	r24, r28
     83e:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
					player_y ++;
     842:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
					update_square_colour(player_x, player_y, colour);
     84c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     850:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
					brek = 1;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <brek+0x1>
     85c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <brek>
					break;
     860:	08 c0       	rjmp	.+16     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
					player_y = y;
				}
			}
		}*/
		for (int y = player_y; y <= 15; y++) {
			for (int x = -1; x <= 1; x++){
     862:	21 96       	adiw	r28, 0x01	; 1
     864:	02 c0       	rjmp	.+4      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     866:	cf ef       	ldi	r28, 0xFF	; 255
     868:	df ef       	ldi	r29, 0xFF	; 255
     86a:	c2 30       	cpi	r28, 0x02	; 2
     86c:	d1 05       	cpc	r29, r1
     86e:	0c f4       	brge	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     870:	91 cf       	rjmp	.-222    	; 0x794 <check_snake_ladder+0x17e>
					update_square_colour(player_x, player_y, colour);
					brek = 1;
					break;
					}
			}
			if (brek) {
     872:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <brek>
     876:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <brek+0x1>
     87a:	89 2b       	or	r24, r25
     87c:	39 f4       	brne	.+14     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
					player_x = x;
					player_y = y;
				}
			}
		}*/
		for (int y = player_y; y <= 15; y++) {
     87e:	9f ef       	ldi	r25, 0xFF	; 255
     880:	e9 1a       	sub	r14, r25
     882:	f9 0a       	sbc	r15, r25
     884:	20 e1       	ldi	r18, 0x10	; 16
     886:	e2 16       	cp	r14, r18
     888:	f1 04       	cpc	r15, r1
     88a:	6c f3       	brlt	.-38     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
			if (brek) {
				break;
				}
			}
			}
		}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	af 90       	pop	r10
     8a0:	9f 90       	pop	r9
     8a2:	08 95       	ret

000008a4 <move_player_n>:

// Move the player by the given number of spaces forward.
void move_player_n(uint8_t num_spaces) {
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	f8 2e       	mov	r15, r24
	// If player 2 turn, variables player_x and player_y are loaded with player 2 position.
	if (two_players) {
     8b0:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     8b4:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     8b8:	89 2b       	or	r24, r25
     8ba:	59 f1       	breq	.+86     	; 0x912 <__stack+0x13>
		if (player_2_turn) {
     8bc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     8c0:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     8c4:	89 2b       	or	r24, r25
     8c6:	99 f0       	breq	.+38     	; 0x8ee <move_player_n+0x4a>
			player_x = player_2_x;
     8c8:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <player_2_x>
     8cc:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_2_y;
     8d0:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <player_2_y>
     8d4:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_2;
     8d8:	80 e5       	ldi	r24, 0x50	; 80
     8da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			update_square_colour(player_1_x, player_1_y, PLAYER_1);
     8de:	40 e4       	ldi	r20, 0x40	; 64
     8e0:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <player_1_y>
     8e4:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <player_1_x>
     8e8:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     8ec:	12 c0       	rjmp	.+36     	; 0x912 <__stack+0x13>
		} else {
			player_x = player_1_x;
     8ee:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <player_1_x>
     8f2:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_1_y;
     8f6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <player_1_y>
     8fa:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_1;
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			update_square_colour(player_2_x, player_2_y, PLAYER_2);
     904:	40 e5       	ldi	r20, 0x50	; 80
     906:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <player_2_y>
     90a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <player_2_x>
     90e:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
		}
	}
	
	// Updates the square color back to whatever was on the square
	update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     912:	c0 91 f9 02 	lds	r28, 0x02F9	; 0x8002f9 <player_x>
     916:	d0 91 f8 02 	lds	r29, 0x02F8	; 0x8002f8 <player_y>
     91a:	20 e1       	ldi	r18, 0x10	; 16
     91c:	c2 02       	muls	r28, r18
     91e:	f0 01       	movw	r30, r0
     920:	11 24       	eor	r1, r1
     922:	ed 5f       	subi	r30, 0xFD	; 253
     924:	fc 4f       	sbci	r31, 0xFC	; 252
     926:	ed 0f       	add	r30, r29
     928:	f1 1d       	adc	r31, r1
     92a:	d7 fd       	sbrc	r29, 7
     92c:	fa 95       	dec	r31
     92e:	80 81       	ld	r24, Z
     930:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     934:	48 2f       	mov	r20, r24
     936:	6d 2f       	mov	r22, r29
     938:	8c 2f       	mov	r24, r28
     93a:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
	
	// Changes player positional knowledge
	int count = 0;
	for (count = 0; count < num_spaces; count++) {
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	ae c0       	rjmp	.+348    	; 0xaa0 <__stack+0x1a1>
		if (player_y % 2 == 0) {
     944:	c0 91 f8 02 	lds	r28, 0x02F8	; 0x8002f8 <player_y>
     948:	8c 2f       	mov	r24, r28
     94a:	81 70       	andi	r24, 0x01	; 1
     94c:	c0 fd       	sbrc	r28, 0
     94e:	52 c0       	rjmp	.+164    	; 0x9f4 <__stack+0xf5>
			if (player_x == 7) {
     950:	d0 91 f9 02 	lds	r29, 0x02F9	; 0x8002f9 <player_x>
     954:	d7 30       	cpi	r29, 0x07	; 7
     956:	39 f5       	brne	.+78     	; 0x9a6 <__stack+0xa7>
				update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     958:	40 e1       	ldi	r20, 0x10	; 16
     95a:	d4 02       	muls	r29, r20
     95c:	f0 01       	movw	r30, r0
     95e:	11 24       	eor	r1, r1
     960:	ed 5f       	subi	r30, 0xFD	; 253
     962:	fc 4f       	sbci	r31, 0xFC	; 252
     964:	ec 0f       	add	r30, r28
     966:	f1 1d       	adc	r31, r1
     968:	c7 fd       	sbrc	r28, 7
     96a:	fa 95       	dec	r31
     96c:	80 81       	ld	r24, Z
     96e:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     972:	48 2f       	mov	r20, r24
     974:	6c 2f       	mov	r22, r28
     976:	8d 2f       	mov	r24, r29
     978:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
				player_y ++;
     97c:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     980:	6f 5f       	subi	r22, 0xFF	; 255
     982:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
				update_square_colour(player_x, player_y, colour);
     986:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     98a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     98e:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     992:	8f e7       	ldi	r24, 0x7F	; 127
     994:	98 e3       	ldi	r25, 0x38	; 56
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	81 50       	subi	r24, 0x01	; 1
     99a:	90 40       	sbci	r25, 0x00	; 0
     99c:	20 40       	sbci	r18, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <__stack+0x99>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <__stack+0xa3>
     9a2:	00 00       	nop
     9a4:	7b c0       	rjmp	.+246    	; 0xa9c <__stack+0x19d>
				_delay_ms(50);
				} else {
				update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     9a6:	40 e1       	ldi	r20, 0x10	; 16
     9a8:	d4 02       	muls	r29, r20
     9aa:	f0 01       	movw	r30, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	ed 5f       	subi	r30, 0xFD	; 253
     9b0:	fc 4f       	sbci	r31, 0xFC	; 252
     9b2:	ec 0f       	add	r30, r28
     9b4:	f1 1d       	adc	r31, r1
     9b6:	c7 fd       	sbrc	r28, 7
     9b8:	fa 95       	dec	r31
     9ba:	80 81       	ld	r24, Z
     9bc:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     9c0:	48 2f       	mov	r20, r24
     9c2:	6c 2f       	mov	r22, r28
     9c4:	8d 2f       	mov	r24, r29
     9c6:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
				player_x ++;
     9ca:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
				update_square_colour(player_x, player_y, colour);
     9d4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9d8:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     9dc:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     9e0:	8f e7       	ldi	r24, 0x7F	; 127
     9e2:	98 e3       	ldi	r25, 0x38	; 56
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	81 50       	subi	r24, 0x01	; 1
     9e8:	90 40       	sbci	r25, 0x00	; 0
     9ea:	20 40       	sbci	r18, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <__stack+0xe7>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__stack+0xf1>
     9f0:	00 00       	nop
     9f2:	54 c0       	rjmp	.+168    	; 0xa9c <__stack+0x19d>
				_delay_ms(50);
			}
		} else if (player_y % 2) {
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	51 c0       	rjmp	.+162    	; 0xa9c <__stack+0x19d>
			if (player_x == 0) {
     9fa:	d0 91 f9 02 	lds	r29, 0x02F9	; 0x8002f9 <player_x>
     9fe:	d1 11       	cpse	r29, r1
     a00:	27 c0       	rjmp	.+78     	; 0xa50 <__stack+0x151>
				update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     a02:	40 e1       	ldi	r20, 0x10	; 16
     a04:	d4 02       	muls	r29, r20
     a06:	f0 01       	movw	r30, r0
     a08:	11 24       	eor	r1, r1
     a0a:	ed 5f       	subi	r30, 0xFD	; 253
     a0c:	fc 4f       	sbci	r31, 0xFC	; 252
     a0e:	ec 0f       	add	r30, r28
     a10:	f1 1d       	adc	r31, r1
     a12:	c7 fd       	sbrc	r28, 7
     a14:	fa 95       	dec	r31
     a16:	80 81       	ld	r24, Z
     a18:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     a1c:	48 2f       	mov	r20, r24
     a1e:	6c 2f       	mov	r22, r28
     a20:	8d 2f       	mov	r24, r29
     a22:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
				player_y ++;
     a26:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
				update_square_colour(player_x, player_y, colour);
     a30:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a34:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     a38:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     a3c:	8f e7       	ldi	r24, 0x7F	; 127
     a3e:	98 e3       	ldi	r25, 0x38	; 56
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	20 40       	sbci	r18, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <__stack+0x143>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <__stack+0x14d>
     a4c:	00 00       	nop
     a4e:	26 c0       	rjmp	.+76     	; 0xa9c <__stack+0x19d>
				_delay_ms(50);
				} else {
				update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     a50:	40 e1       	ldi	r20, 0x10	; 16
     a52:	d4 02       	muls	r29, r20
     a54:	f0 01       	movw	r30, r0
     a56:	11 24       	eor	r1, r1
     a58:	ed 5f       	subi	r30, 0xFD	; 253
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	ec 0f       	add	r30, r28
     a5e:	f1 1d       	adc	r31, r1
     a60:	c7 fd       	sbrc	r28, 7
     a62:	fa 95       	dec	r31
     a64:	80 81       	ld	r24, Z
     a66:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     a6a:	48 2f       	mov	r20, r24
     a6c:	6c 2f       	mov	r22, r28
     a6e:	8d 2f       	mov	r24, r29
     a70:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
				player_x --;
     a74:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
				update_square_colour(player_x, player_y, colour);
     a7e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a82:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     a86:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     a8a:	8f e7       	ldi	r24, 0x7F	; 127
     a8c:	98 e3       	ldi	r25, 0x38	; 56
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	90 40       	sbci	r25, 0x00	; 0
     a94:	20 40       	sbci	r18, 0x00	; 0
     a96:	e1 f7       	brne	.-8      	; 0xa90 <__stack+0x191>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <__stack+0x19b>
     a9a:	00 00       	nop
	// Updates the square color back to whatever was on the square
	update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
	
	// Changes player positional knowledge
	int count = 0;
	for (count = 0; count < num_spaces; count++) {
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
     aa0:	8f 2d       	mov	r24, r15
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	08 17       	cp	r16, r24
     aa6:	19 07       	cpc	r17, r25
     aa8:	0c f4       	brge	.+2      	; 0xaac <__stack+0x1ad>
     aaa:	4c cf       	rjmp	.-360    	; 0x944 <__stack+0x45>
			}
		}
	}
	
	// Checks if on snake or ladder
	check_snake_ladder();
     aac:	0e 94 0b 03 	call	0x616	; 0x616 <check_snake_ladder>
	is_game_over();
	
	// Update positions
	if (two_players) {
     ab0:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     ab4:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     ab8:	89 2b       	or	r24, r25
     aba:	b9 f0       	breq	.+46     	; 0xaea <__stack+0x1eb>
		if (player_2_turn) {
     abc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     ac0:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     ac4:	89 2b       	or	r24, r25
     ac6:	49 f0       	breq	.+18     	; 0xada <__stack+0x1db>
			player_2_x = player_x;
     ac8:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     acc:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <player_2_x>
			player_2_y = player_y;
     ad0:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <player_y>
     ad4:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <player_2_y>
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <__stack+0x1eb>
			} else {
			player_1_x = player_x;
     ada:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     ade:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <player_1_x>
			player_1_y = player_y;
     ae2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <player_y>
     ae6:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <player_1_y>
		}
	}
	
	// Updates new square player is on
	update_square_colour(player_x, player_y, colour);
     aea:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     aee:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     af2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     af6:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
	
	// Toggles player turn
	if (two_players) {
     afa:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     afe:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	51 f0       	breq	.+20     	; 0xb1a <__stack+0x21b>
		player_2_turn ^= 1;
     b06:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <player_2_turn>
     b0a:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <player_2_turn+0x1>
     b0e:	41 e0       	ldi	r20, 0x01	; 1
     b10:	24 27       	eor	r18, r20
     b12:	30 93 84 03 	sts	0x0384, r19	; 0x800384 <player_2_turn+0x1>
     b16:	20 93 83 03 	sts	0x0383, r18	; 0x800383 <player_2_turn>
	}
		
	// If player 2 turn, variables player_x and player_y are loaded with player 2 position.
	if (two_players) {
     b1a:	89 2b       	or	r24, r25
     b1c:	e9 f0       	breq	.+58     	; 0xb58 <__stack+0x259>
		if (player_2_turn) {
     b1e:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     b22:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     b26:	89 2b       	or	r24, r25
     b28:	61 f0       	breq	.+24     	; 0xb42 <__stack+0x243>
			player_x = player_2_x;
     b2a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <player_2_x>
     b2e:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_2_y;
     b32:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <player_2_y>
     b36:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_2;
     b3a:	80 e5       	ldi	r24, 0x50	; 80
     b3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b40:	0b c0       	rjmp	.+22     	; 0xb58 <__stack+0x259>
			} else {
			player_x = player_1_x;
     b42:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <player_1_x>
     b46:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_1_y;
     b4a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <player_1_y>
     b4e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_1;
     b52:	80 e4       	ldi	r24, 0x40	; 64
     b54:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	08 95       	ret

00000b64 <move_player>:

// Move the player one space in the direction (dx, dy). The player should wrap
// around the display if moved 'off' the display.
void move_player(int8_t dx, int8_t dy) {
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	08 2f       	mov	r16, r24
     b6e:	16 2f       	mov	r17, r22
	// If player 2 turn, variables player_x and player_y are loaded with player 2 position.
	if (two_players) {
     b70:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     b74:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     b78:	89 2b       	or	r24, r25
     b7a:	e9 f0       	breq	.+58     	; 0xbb6 <move_player+0x52>
		if (player_2_turn) {
     b7c:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     b80:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     b84:	89 2b       	or	r24, r25
     b86:	61 f0       	breq	.+24     	; 0xba0 <move_player+0x3c>
			player_x = player_2_x;
     b88:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <player_2_x>
     b8c:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_2_y;
     b90:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <player_2_y>
     b94:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_2;
     b98:	80 e5       	ldi	r24, 0x50	; 80
     b9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b9e:	0b c0       	rjmp	.+22     	; 0xbb6 <move_player+0x52>
			} else {
			player_x = player_1_x;
     ba0:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <player_1_x>
     ba4:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_1_y;
     ba8:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <player_1_y>
     bac:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_1;
     bb0:	80 e4       	ldi	r24, 0x40	; 64
     bb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	// Updates the square colour back to whatever was on the square
	update_square_colour(player_x, player_y, get_object_type(board[player_x][player_y]));
     bb6:	c0 91 f9 02 	lds	r28, 0x02F9	; 0x8002f9 <player_x>
     bba:	d0 91 f8 02 	lds	r29, 0x02F8	; 0x8002f8 <player_y>
     bbe:	40 e1       	ldi	r20, 0x10	; 16
     bc0:	c4 02       	muls	r28, r20
     bc2:	f0 01       	movw	r30, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	ed 5f       	subi	r30, 0xFD	; 253
     bc8:	fc 4f       	sbci	r31, 0xFC	; 252
     bca:	ed 0f       	add	r30, r29
     bcc:	f1 1d       	adc	r31, r1
     bce:	d7 fd       	sbrc	r29, 7
     bd0:	fa 95       	dec	r31
     bd2:	80 81       	ld	r24, Z
     bd4:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     bd8:	48 2f       	mov	r20, r24
     bda:	6d 2f       	mov	r22, r29
     bdc:	8c 2f       	mov	r24, r28
     bde:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
	
	// Changes player positional knowledge
	player_x += dx;
     be2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     be6:	80 0f       	add	r24, r16
     be8:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
	player_y += dy;
     bec:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     bf0:	61 0f       	add	r22, r17
     bf2:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <player_y>
	
	// Corrects if the player moved off board
	if (player_x > 7){
     bf6:	88 30       	cpi	r24, 0x08	; 8
     bf8:	14 f0       	brlt	.+4      	; 0xbfe <move_player+0x9a>
		player_x = 0;
     bfa:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <player_x>
	}
	if (player_x < 0){
     bfe:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     c02:	88 23       	and	r24, r24
     c04:	1c f4       	brge	.+6      	; 0xc0c <move_player+0xa8>
		player_x = 7;
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
	}
	if (player_y > 15){
     c0c:	60 31       	cpi	r22, 0x10	; 16
     c0e:	14 f0       	brlt	.+4      	; 0xc14 <move_player+0xb0>
		player_y = 0;
     c10:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <player_y>
	}
	if (player_y < 0l){
     c14:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <player_y>
     c18:	88 23       	and	r24, r24
     c1a:	1c f4       	brge	.+6      	; 0xc22 <move_player+0xbe>
		player_y = 15;
     c1c:	8f e0       	ldi	r24, 0x0F	; 15
     c1e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
	}
	
	// Checks if on snake or ladder
	check_snake_ladder();
     c22:	0e 94 0b 03 	call	0x616	; 0x616 <check_snake_ladder>
	is_game_over();

	// Update positions
	if (two_players) {
     c26:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     c2a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     c2e:	89 2b       	or	r24, r25
     c30:	b9 f0       	breq	.+46     	; 0xc60 <move_player+0xfc>
		if (player_2_turn) {
     c32:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     c36:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     c3a:	89 2b       	or	r24, r25
     c3c:	49 f0       	breq	.+18     	; 0xc50 <move_player+0xec>
			player_2_x = player_x;
     c3e:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     c42:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <player_2_x>
			player_2_y = player_y;
     c46:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <player_y>
     c4a:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <player_2_y>
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <move_player+0xfc>
			} else {
			player_1_x = player_x;
     c50:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     c54:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <player_1_x>
			player_1_y = player_y;
     c58:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <player_y>
     c5c:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <player_1_y>
		}
	}
	
	// Updates new square player is on
	update_square_colour(player_x, player_y, colour);
     c60:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c64:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     c68:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     c6c:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
	
	// Toggles player turn
	if (two_players) {
     c70:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     c74:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	51 f0       	breq	.+20     	; 0xc90 <move_player+0x12c>
		player_2_turn ^= 1;
     c7c:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <player_2_turn>
     c80:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <player_2_turn+0x1>
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	24 27       	eor	r18, r20
     c88:	30 93 84 03 	sts	0x0384, r19	; 0x800384 <player_2_turn+0x1>
     c8c:	20 93 83 03 	sts	0x0383, r18	; 0x800383 <player_2_turn>
	}
	
	// If player 2 turn, variables player_x and player_y are loaded with player 2 position.
	if (two_players) {
     c90:	89 2b       	or	r24, r25
     c92:	e9 f0       	breq	.+58     	; 0xcce <move_player+0x16a>
		if (player_2_turn) {
     c94:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     c98:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     c9c:	89 2b       	or	r24, r25
     c9e:	61 f0       	breq	.+24     	; 0xcb8 <move_player+0x154>
			player_x = player_2_x;
     ca0:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <player_2_x>
     ca4:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_2_y;
     ca8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <player_2_y>
     cac:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_2;
     cb0:	80 e5       	ldi	r24, 0x50	; 80
     cb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     cb6:	0b c0       	rjmp	.+22     	; 0xcce <move_player+0x16a>
			} else {
			player_x = player_1_x;
     cb8:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <player_1_x>
     cbc:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <player_x>
			player_y = player_1_y;
     cc0:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <player_1_y>
     cc4:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <player_y>
			colour = PLAYER_1;
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <flash_player_cursor>:

// Flash the player icon on and off. This should be called at a regular
// interval (see where this is called in project.c) to create a consistent
// 500 ms flash.
void flash_player_cursor(void) {
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
	if (player_2_turn) {
     cdc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <player_2_turn>
     ce0:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <player_2_turn+0x1>
     ce4:	89 2b       	or	r24, r25
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <flash_player_cursor+0x18>
		colour = PLAYER_2;
     ce8:	80 e5       	ldi	r24, 0x50	; 80
     cea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <flash_player_cursor+0x1e>
	} else {
		colour = PLAYER_1;
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (player_visible) {
     cf6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <player_visible>
     cfa:	88 23       	and	r24, r24
     cfc:	71 f0       	breq	.+28     	; 0xd1a <flash_player_cursor+0x42>
		// we need to flash the player off, it should be replaced by
		// the colour of the object which is at that location
		uint8_t object_at_cursor = get_object_at(player_x, player_y);
     cfe:	d0 91 f8 02 	lds	r29, 0x02F8	; 0x8002f8 <player_y>
     d02:	c0 91 f9 02 	lds	r28, 0x02F9	; 0x8002f9 <player_x>
     d06:	6d 2f       	mov	r22, r29
     d08:	8c 2f       	mov	r24, r28
     d0a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_object_at>
		update_square_colour(player_x, player_y, object_at_cursor);
     d0e:	48 2f       	mov	r20, r24
     d10:	6d 2f       	mov	r22, r29
     d12:	8c 2f       	mov	r24, r28
     d14:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <flash_player_cursor+0x52>
			
		} else {
		// we need to flash the player on
		update_square_colour(player_x, player_y, colour);
     d1a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d1e:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <player_y>
     d22:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     d26:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
	}
	player_visible = 1 - player_visible; //alternate between 0 and 1
     d2a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <player_visible>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	89 1b       	sub	r24, r25
     d32:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <player_visible>
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void) {
	// Detect if the game is over i.e. if a player has won.
	if (!two_players) {
     d3c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <two_players>
     d40:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <two_players+0x1>
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	c9 f4       	brne	.+50     	; 0xd7a <is_game_over+0x3e>
		if (((player_x == 0) & (player_y == 15)) | (player_y > 15) | (player_x < 0)) {
     d48:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <player_x>
     d4c:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <player_y>
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	81 11       	cpse	r24, r1
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	3f 30       	cpi	r19, 0x0F	; 15
     d5a:	09 f0       	breq	.+2      	; 0xd5e <is_game_over+0x22>
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	92 23       	and	r25, r18
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 31       	cpi	r19, 0x10	; 16
     d64:	0c f4       	brge	.+2      	; 0xd68 <is_game_over+0x2c>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	88 1f       	adc	r24, r24
     d6a:	88 27       	eor	r24, r24
     d6c:	88 1f       	adc	r24, r24
     d6e:	92 2b       	or	r25, r18
     d70:	11 f4       	brne	.+4      	; 0xd76 <is_game_over+0x3a>
     d72:	88 23       	and	r24, r24
     d74:	a1 f1       	breq	.+104    	; 0xdde <is_game_over+0xa2>
			return 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	08 95       	ret
		}
		return 0;
	}
	
	if (two_players) {
     d7a:	89 2b       	or	r24, r25
     d7c:	91 f1       	breq	.+100    	; 0xde2 <is_game_over+0xa6>
		if (((player_1_x == 0) & (player_1_y == 15)) | (player_1_y > 15) | (player_1_x < 0)) {
     d7e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <player_1_x>
     d82:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <player_1_y>
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	81 11       	cpse	r24, r1
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	3f 30       	cpi	r19, 0x0F	; 15
     d90:	09 f0       	breq	.+2      	; 0xd94 <is_game_over+0x58>
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	92 23       	and	r25, r18
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	30 31       	cpi	r19, 0x10	; 16
     d9a:	0c f4       	brge	.+2      	; 0xd9e <is_game_over+0x62>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	88 1f       	adc	r24, r24
     da0:	88 27       	eor	r24, r24
     da2:	88 1f       	adc	r24, r24
     da4:	92 2b       	or	r25, r18
     da6:	f9 f4       	brne	.+62     	; 0xde6 <is_game_over+0xaa>
     da8:	81 11       	cpse	r24, r1
     daa:	1d c0       	rjmp	.+58     	; 0xde6 <is_game_over+0xaa>
			return 1;
		} else if (((player_2_x == 0) & (player_2_y == 15)) | (player_2_y > 15) | (player_2_x < 0)) {
     dac:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <player_2_x>
     db0:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <player_2_y>
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	81 11       	cpse	r24, r1
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	3f 30       	cpi	r19, 0x0F	; 15
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <is_game_over+0x86>
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	92 23       	and	r25, r18
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	30 31       	cpi	r19, 0x10	; 16
     dc8:	0c f4       	brge	.+2      	; 0xdcc <is_game_over+0x90>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	88 1f       	adc	r24, r24
     dce:	88 27       	eor	r24, r24
     dd0:	88 1f       	adc	r24, r24
     dd2:	92 2b       	or	r25, r18
     dd4:	11 f4       	brne	.+4      	; 0xdda <is_game_over+0x9e>
     dd6:	88 23       	and	r24, r24
     dd8:	41 f0       	breq	.+16     	; 0xdea <is_game_over+0xae>
		return 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	08 95       	ret
	// Detect if the game is over i.e. if a player has won.
	if (!two_players) {
		if (((player_x == 0) & (player_y == 15)) | (player_y > 15) | (player_x < 0)) {
			return 1;
		}
		return 0;
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	08 95       	ret
		} else if (((player_2_x == 0) & (player_2_y == 15)) | (player_2_y > 15) | (player_2_x < 0)) {
		return 1;
		}
		return 0;
	}
	return 0;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	08 95       	ret
		return 0;
	}
	
	if (two_players) {
		if (((player_1_x == 0) & (player_1_y == 15)) | (player_1_y > 15) | (player_1_x < 0)) {
			return 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	08 95       	ret
		} else if (((player_2_x == 0) & (player_2_y == 15)) | (player_2_y > 15) | (player_2_x < 0)) {
		return 1;
		}
		return 0;
     dea:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
     dec:	08 95       	ret

00000dee <end_game>:

void end_game(void) {
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
		// Board animation
		for (int x = 0; x < WIDTH; x++) {
     df6:	00 e0       	ldi	r16, 0x00	; 0
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <end_game+0x36>
     dfc:	8f e3       	ldi	r24, 0x3F	; 63
     dfe:	9c e9       	ldi	r25, 0x9C	; 156
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <end_game+0x12>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <end_game+0x18>
     e06:	00 00       	nop
			for (int y = 0; y < HEIGHT; y++) {
				_delay_ms(20);
				update_square_colour(x, y, SNAKE_MIDDLE);
     e08:	40 ea       	ldi	r20, 0xA0	; 160
     e0a:	6c 2f       	mov	r22, r28
     e0c:	80 2f       	mov	r24, r16
     e0e:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
}

void end_game(void) {
		// Board animation
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <end_game+0x2c>
     e16:	c0 e0       	ldi	r28, 0x00	; 0
     e18:	d0 e0       	ldi	r29, 0x00	; 0
     e1a:	c0 31       	cpi	r28, 0x10	; 16
     e1c:	d1 05       	cpc	r29, r1
     e1e:	74 f3       	brlt	.-36     	; 0xdfc <end_game+0xe>
	return 0;
}

void end_game(void) {
		// Board animation
		for (int x = 0; x < WIDTH; x++) {
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	08 30       	cpi	r16, 0x08	; 8
     e26:	11 05       	cpc	r17, r1
     e28:	b4 f3       	brlt	.-20     	; 0xe16 <end_game+0x28>
     e2a:	00 e0       	ldi	r16, 0x00	; 0
     e2c:	10 e0       	ldi	r17, 0x00	; 0
     e2e:	31 c0       	rjmp	.+98     	; 0xe92 <end_game+0xa4>
     e30:	8f e3       	ldi	r24, 0x3F	; 63
     e32:	9c e9       	ldi	r25, 0x9C	; 156
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <end_game+0x46>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <end_game+0x4c>
     e3a:	00 00       	nop
		}
		
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				_delay_ms(20);
				board[x][y] = game_over[HEIGHT - 1 - y][x];
     e3c:	ef e0       	ldi	r30, 0x0F	; 15
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	ec 1b       	sub	r30, r28
     e42:	fd 0b       	sbc	r31, r29
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ee 0f       	add	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	ef 5c       	subi	r30, 0xCF	; 207
     e52:	fe 4f       	sbci	r31, 0xFE	; 254
     e54:	e0 0f       	add	r30, r16
     e56:	f1 1f       	adc	r31, r17
     e58:	80 81       	ld	r24, Z
     e5a:	f8 01       	movw	r30, r16
     e5c:	e2 95       	swap	r30
     e5e:	f2 95       	swap	r31
     e60:	f0 7f       	andi	r31, 0xF0	; 240
     e62:	fe 27       	eor	r31, r30
     e64:	e0 7f       	andi	r30, 0xF0	; 240
     e66:	fe 27       	eor	r31, r30
     e68:	ed 5f       	subi	r30, 0xFD	; 253
     e6a:	fc 4f       	sbci	r31, 0xFC	; 252
     e6c:	ec 0f       	add	r30, r28
     e6e:	fd 1f       	adc	r31, r29
     e70:	80 83       	st	Z, r24
				update_square_colour(x, y, get_object_type(board[x][y]));
     e72:	0e 94 85 02 	call	0x50a	; 0x50a <get_object_type>
     e76:	48 2f       	mov	r20, r24
     e78:	6c 2f       	mov	r22, r28
     e7a:	80 2f       	mov	r24, r16
     e7c:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
				update_square_colour(x, y, SNAKE_MIDDLE);
			}
		}
		
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     e80:	21 96       	adiw	r28, 0x01	; 1
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <end_game+0x9a>
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	d0 e0       	ldi	r29, 0x00	; 0
     e88:	c0 31       	cpi	r28, 0x10	; 16
     e8a:	d1 05       	cpc	r29, r1
     e8c:	8c f2       	brlt	.-94     	; 0xe30 <end_game+0x42>
				_delay_ms(20);
				update_square_colour(x, y, SNAKE_MIDDLE);
			}
		}
		
		for (int x = 0; x < WIDTH; x++) {
     e8e:	0f 5f       	subi	r16, 0xFF	; 255
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	08 30       	cpi	r16, 0x08	; 8
     e94:	11 05       	cpc	r17, r1
     e96:	b4 f3       	brlt	.-20     	; 0xe84 <end_game+0x96>
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	29 e6       	ldi	r18, 0x69	; 105
     e9c:	88 e1       	ldi	r24, 0x18	; 24
     e9e:	91 50       	subi	r25, 0x01	; 1
     ea0:	20 40       	sbci	r18, 0x00	; 0
     ea2:	80 40       	sbci	r24, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <end_game+0xb0>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <end_game+0xba>
     ea8:	00 00       	nop
				update_square_colour(x, y, get_object_type(board[x][y]));
			}
		}
		
		_delay_ms(1000);
		for (int x = 0; x < WIDTH; x++) {
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	0e c0       	rjmp	.+28     	; 0xecc <end_game+0xde>
			for (int y = 0; y < HEIGHT; y++) {
				update_square_colour(x, y, EMPTY_SQUARE);
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	6c 2f       	mov	r22, r28
     eb4:	80 2f       	mov	r24, r16
     eb6:	0e 94 30 02 	call	0x460	; 0x460 <update_square_colour>
			}
		}
		
		_delay_ms(1000);
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     eba:	21 96       	adiw	r28, 0x01	; 1
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <end_game+0xd4>
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
     ec2:	c0 31       	cpi	r28, 0x10	; 16
     ec4:	d1 05       	cpc	r29, r1
     ec6:	a4 f3       	brlt	.-24     	; 0xeb0 <end_game+0xc2>
				update_square_colour(x, y, get_object_type(board[x][y]));
			}
		}
		
		_delay_ms(1000);
		for (int x = 0; x < WIDTH; x++) {
     ec8:	0f 5f       	subi	r16, 0xFF	; 255
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	08 30       	cpi	r16, 0x08	; 8
     ece:	11 05       	cpc	r17, r1
     ed0:	b4 f3       	brlt	.-20     	; 0xebe <end_game+0xd0>
			for (int y = 0; y < HEIGHT; y++) {
				update_square_colour(x, y, EMPTY_SQUARE);
			}
		}
		
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     edc:	80 e8       	ldi	r24, 0x80	; 128
     ede:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <spi_setup_master>
     ee2:	08 95       	ret

00000ee4 <ledmatrix_update_pixel>:
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	80 31       	cpi	r24, 0x10	; 16
     eec:	b0 f4       	brcc	.+44     	; 0xf1a <ledmatrix_update_pixel+0x36>
     eee:	68 30       	cpi	r22, 0x08	; 8
     ef0:	a0 f4       	brcc	.+40     	; 0xf1a <ledmatrix_update_pixel+0x36>
     ef2:	14 2f       	mov	r17, r20
     ef4:	c6 2f       	mov	r28, r22
     ef6:	d8 2f       	mov	r29, r24
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     efe:	6c 2f       	mov	r22, r28
     f00:	67 70       	andi	r22, 0x07	; 7
     f02:	80 e1       	ldi	r24, 0x10	; 16
     f04:	68 9f       	mul	r22, r24
     f06:	90 01       	movw	r18, r0
     f08:	11 24       	eor	r1, r1
     f0a:	8d 2f       	mov	r24, r29
     f0c:	8f 70       	andi	r24, 0x0F	; 15
     f0e:	82 2b       	or	r24, r18
     f10:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     f14:	81 2f       	mov	r24, r17
     f16:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	08 95       	ret

00000f22 <ledmatrix_update_column>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	80 31       	cpi	r24, 0x10	; 16
     f2a:	a0 f4       	brcc	.+40     	; 0xf54 <ledmatrix_update_column+0x32>
     f2c:	8b 01       	movw	r16, r22
     f2e:	c8 2f       	mov	r28, r24
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     f36:	8c 2f       	mov	r24, r28
     f38:	8f 70       	andi	r24, 0x0F	; 15
     f3a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     f3e:	c0 e0       	ldi	r28, 0x00	; 0
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <ledmatrix_update_column+0x2e>
     f42:	f8 01       	movw	r30, r16
     f44:	ec 0f       	add	r30, r28
     f46:	f1 1d       	adc	r31, r1
     f48:	80 81       	ld	r24, Z
     f4a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     f4e:	cf 5f       	subi	r28, 0xFF	; 255
     f50:	c8 30       	cpi	r28, 0x08	; 8
     f52:	b8 f3       	brcs	.-18     	; 0xf42 <ledmatrix_update_column+0x20>
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f5c:	8f e0       	ldi	r24, 0x0F	; 15
     f5e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <spi_send_byte>
     f62:	08 95       	ret

00000f64 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     f64:	0e 94 6e 07 	call	0xedc	; 0xedc <ledmatrix_setup>
	init_button_interrupts();
     f68:	0e 94 32 01 	call	0x264	; 0x264 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	7b e4       	ldi	r23, 0x4B	; 75
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <init_serial_stdio>
	
	init_timer0();
     f7a:	0e 94 0a 10 	call	0x2014	; 0x2014 <init_timer0>
	
	// Turn on global interrupts
	sei();
     f7e:	78 94       	sei
     f80:	08 95       	ret

00000f82 <start_screen>:
}

void start_screen(void) {
     f82:	cf 93       	push	r28
	// Clear terminal screen and output a message
	clear_terminal();
     f84:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <clear_terminal>
	move_terminal_cursor(10,10);
     f88:	6a e0       	ldi	r22, 0x0A	; 10
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	8a e0       	ldi	r24, 0x0A	; 10
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
	printf_P(PSTR("Snakes and Ladders"));
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	9f 93       	push	r25
     f9a:	8f 93       	push	r24
     f9c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
	move_terminal_cursor(10,12);
     fa0:	6c e0       	ldi	r22, 0x0C	; 12
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 A2 by Muhammad Sulaman Khan - s4751192"));
     fac:	8b ec       	ldi	r24, 0xCB	; 203
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
	move_terminal_cursor(10,14);
     fb8:	6e e0       	ldi	r22, 0x0E	; 14
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	8a e0       	ldi	r24, 0x0A	; 10
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
	printf_P(PSTR("Start game by pressing 1 (for 1 player) or 2	(for 2 player)"));
     fc4:	8f e8       	ldi	r24, 0x8F	; 143
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
	move_terminal_cursor(10,16);
     fd0:	60 e1       	ldi	r22, 0x10	; 16
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	8a e0       	ldi	r24, 0x0A	; 10
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
	printf_P(PSTR("Selected Board (press B to change): Board %d"), board_number);
     fdc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <board_number+0x1>
     fe0:	8f 93       	push	r24
     fe2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <board_number>
     fe6:	8f 93       	push	r24
     fe8:	82 e6       	ldi	r24, 0x62	; 98
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	
	start_display();
     ff4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <start_display>
     ff8:	8d b7       	in	r24, 0x3d	; 61
     ffa:	9e b7       	in	r25, 0x3e	; 62
     ffc:	0a 96       	adiw	r24, 0x0a	; 10
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	9e bf       	out	0x3e, r25	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	8d bf       	out	0x3d, r24	; 61
	
	// Wait until a button is pressed, or 's' is pressed on the terminal
	while(1) {
		// First check for if a 's' is pressed
		char serial_input = -1;
		if (serial_input_available()) {
    1008:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <serial_input_available>
    100c:	88 23       	and	r24, r24
    100e:	41 f0       	breq	.+16     	; 0x1020 <start_screen+0x9e>
			serial_input = fgetc(stdin);
    1010:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <__iob>
    1014:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <__iob+0x1>
    1018:	0e 94 98 10 	call	0x2130	; 0x2130 <fgetc>
    101c:	c8 2f       	mov	r28, r24
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <start_screen+0xa0>
	start_display();
	
	// Wait until a button is pressed, or 's' is pressed on the terminal
	while(1) {
		// First check for if a 's' is pressed
		char serial_input = -1;
    1020:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		
		PORTC = 0x00;
    1022:	18 b8       	out	0x08, r1	; 8
		
		if (timer) {
    1024:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <timer>
    1028:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <timer+0x1>
    102c:	89 2b       	or	r24, r25
    102e:	b9 f0       	breq	.+46     	; 0x105e <start_screen+0xdc>
			if (hard) {
    1030:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <hard>
    1034:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <hard+0x1>
    1038:	89 2b       	or	r24, r25
    103a:	59 f0       	breq	.+22     	; 0x1052 <start_screen+0xd0>
				time = 45;
    103c:	8d e2       	ldi	r24, 0x2D	; 45
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    1044:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
				time2 = 45;
    1048:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <time2+0x1>
    104c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <time2>
    1050:	06 c0       	rjmp	.+12     	; 0x105e <start_screen+0xdc>
			} else {
				time = 90;
    1052:	8a e5       	ldi	r24, 0x5A	; 90
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    105a:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
				time = 90;
			}
		}
		
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S' || serial_input == '1') {
    105e:	c3 37       	cpi	r28, 0x73	; 115
    1060:	09 f4       	brne	.+2      	; 0x1064 <start_screen+0xe2>
    1062:	73 c0       	rjmp	.+230    	; 0x114a <start_screen+0x1c8>
    1064:	c3 35       	cpi	r28, 0x53	; 83
    1066:	09 f4       	brne	.+2      	; 0x106a <start_screen+0xe8>
    1068:	70 c0       	rjmp	.+224    	; 0x114a <start_screen+0x1c8>
    106a:	c1 33       	cpi	r28, 0x31	; 49
    106c:	09 f4       	brne	.+2      	; 0x1070 <start_screen+0xee>
    106e:	6d c0       	rjmp	.+218    	; 0x114a <start_screen+0x1c8>
			break;
		}
		
		if (serial_input == 'b' || serial_input == 'B') {
    1070:	c2 36       	cpi	r28, 0x62	; 98
    1072:	11 f0       	breq	.+4      	; 0x1078 <start_screen+0xf6>
    1074:	c2 34       	cpi	r28, 0x42	; 66
    1076:	69 f5       	brne	.+90     	; 0x10d2 <start_screen+0x150>
			if (board_number == number_of_boards) {
    1078:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <board_number>
    107c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <board_number+0x1>
    1080:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <number_of_boards>
    1084:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <number_of_boards+0x1>
    1088:	82 17       	cp	r24, r18
    108a:	93 07       	cpc	r25, r19
    108c:	39 f4       	brne	.+14     	; 0x109c <start_screen+0x11a>
				board_number = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <board_number+0x1>
    1096:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <board_number>
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <start_screen+0x124>
			} else {
			board_number ++;	
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <board_number+0x1>
    10a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <board_number>
			}
			move_terminal_cursor(52, 16);
    10a6:	60 e1       	ldi	r22, 0x10	; 16
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	84 e3       	ldi	r24, 0x34	; 52
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
			printf_P(PSTR("%d"), board_number);		
    10b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <board_number+0x1>
    10b6:	8f 93       	push	r24
    10b8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <board_number>
    10bc:	8f 93       	push	r24
    10be:	8f e5       	ldi	r24, 0x5F	; 95
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
		}
		
		if (serial_input == 'e' || serial_input == 'E') {
    10d2:	c5 36       	cpi	r28, 0x65	; 101
    10d4:	d1 f1       	breq	.+116    	; 0x114a <start_screen+0x1c8>
    10d6:	c5 34       	cpi	r28, 0x45	; 69
    10d8:	c1 f1       	breq	.+112    	; 0x114a <start_screen+0x1c8>
			break;
		}
		
		if (serial_input == 'm' || serial_input == 'M') {
    10da:	cd 36       	cpi	r28, 0x6D	; 109
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <start_screen+0x160>
    10de:	cd 34       	cpi	r28, 0x4D	; 77
    10e0:	81 f4       	brne	.+32     	; 0x1102 <start_screen+0x180>
			timer = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <timer+0x1>
    10ea:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timer>
			time = 90;
    10ee:	8a e5       	ldi	r24, 0x5A	; 90
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    10f6:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
			time2 = 90;
    10fa:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <time2+0x1>
    10fe:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <time2>
		}
		
		if (serial_input == 'h' || serial_input == 'H') {
    1102:	c8 36       	cpi	r28, 0x68	; 104
    1104:	11 f0       	breq	.+4      	; 0x110a <start_screen+0x188>
    1106:	c8 34       	cpi	r28, 0x48	; 72
    1108:	a1 f4       	brne	.+40     	; 0x1132 <start_screen+0x1b0>
			timer = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <timer+0x1>
    1112:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timer>
			time = 45;
    1116:	2d e2       	ldi	r18, 0x2D	; 45
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <time+0x1>
    111e:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <time>
			time2 = 45;
    1122:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <time2+0x1>
    1126:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <time2>
			hard = 1;
    112a:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <hard+0x1>
    112e:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <hard>
		}
		
		if (serial_input == '2') {
    1132:	c2 33       	cpi	r28, 0x32	; 50
    1134:	29 f4       	brne	.+10     	; 0x1140 <start_screen+0x1be>
			set_two_players(1);
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <set_two_players>
			break;
    113e:	05 c0       	rjmp	.+10     	; 0x114a <start_screen+0x1c8>
		}
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    1140:	0e 94 42 01 	call	0x284	; 0x284 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
    1144:	8f 3f       	cpi	r24, 0xFF	; 255
    1146:	09 f4       	brne	.+2      	; 0x114a <start_screen+0x1c8>
    1148:	5f cf       	rjmp	.-322    	; 0x1008 <start_screen+0x86>
			break;
		}
	}
}
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    114e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <clear_terminal>
	
	// Initialise the game and display
	initialise_game(board_number);
    1152:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <board_number>
    1156:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <board_number+0x1>
    115a:	0e 94 87 02 	call	0x50e	; 0x50e <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    115e:	0e 94 42 01 	call	0x284	; 0x284 <button_pushed>
	clear_serial_input_buffer();
    1162:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <clear_serial_input_buffer>
    1166:	08 95       	ret

00001168 <handle_game_over>:
	}	
	// We get here if the game is over.
}

void handle_game_over(void) {
	end_game();
    1168:	0e 94 f7 06 	call	0xdee	; 0xdee <end_game>
	
	// Terminal stuff
	clear_terminal();
    116c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <clear_terminal>
	if (get_two_players()) {
    1170:	0e 94 64 02 	call	0x4c8	; 0x4c8 <get_two_players>
    1174:	89 2b       	or	r24, r25
    1176:	29 f1       	breq	.+74     	; 0x11c2 <handle_game_over+0x5a>
		move_terminal_cursor(10,12);
    1178:	6c e0       	ldi	r22, 0x0C	; 12
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
		printf_P(PSTR("PLAYER %d WINS!!!"), winner);
    1184:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <winner+0x1>
    1188:	8f 93       	push	r24
    118a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <winner>
    118e:	8f 93       	push	r24
    1190:	82 ec       	ldi	r24, 0xC2	; 194
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
		move_terminal_cursor(10,14);
    119c:	6e e0       	ldi	r22, 0x0E	; 14
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	8a e0       	ldi	r24, 0x0A	; 10
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
		printf_P(PSTR("Press a button to start again"));
    11a8:	84 ea       	ldi	r24, 0xA4	; 164
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	1c c0       	rjmp	.+56     	; 0x11fa <handle_game_over+0x92>
	} else {
		move_terminal_cursor(10,12);
    11c2:	6c e0       	ldi	r22, 0x0C	; 12
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	8a e0       	ldi	r24, 0x0A	; 10
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
		printf_P(PSTR("GAME OVER"));
    11ce:	8a e9       	ldi	r24, 0x9A	; 154
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9f 93       	push	r25
    11d4:	8f 93       	push	r24
    11d6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
		move_terminal_cursor(10,14);
    11da:	6e e0       	ldi	r22, 0x0E	; 14
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	8a e0       	ldi	r24, 0x0A	; 10
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
		printf_P(PSTR("Press a button to start again"));
    11e6:	8c e7       	ldi	r24, 0x7C	; 124
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9f 93       	push	r25
    11ec:	8f 93       	push	r24
    11ee:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
	}
	
	PORTC = 0x00;
    11fa:	18 b8       	out	0x08, r1	; 8
	
	while (button_pushed() == NO_BUTTON_PUSHED) {
    11fc:	16 c0       	rjmp	.+44     	; 0x122a <handle_game_over+0xc2>
		char serial_input = -1;
		if (serial_input_available()) {
    11fe:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <serial_input_available>
    1202:	88 23       	and	r24, r24
    1204:	39 f0       	breq	.+14     	; 0x1214 <handle_game_over+0xac>
			serial_input = fgetc(stdin);
    1206:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <__iob>
    120a:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <__iob+0x1>
    120e:	0e 94 98 10 	call	0x2130	; 0x2130 <fgetc>
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <handle_game_over+0xae>
	}
	
	PORTC = 0x00;
	
	while (button_pushed() == NO_BUTTON_PUSHED) {
		char serial_input = -1;
    1214:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		if (serial_input == 's' || serial_input == 'S' || button_pushed() != NO_BUTTON_PUSHED) {
    1216:	83 37       	cpi	r24, 0x73	; 115
    1218:	31 f0       	breq	.+12     	; 0x1226 <handle_game_over+0xbe>
    121a:	83 35       	cpi	r24, 0x53	; 83
    121c:	21 f0       	breq	.+8      	; 0x1226 <handle_game_over+0xbe>
    121e:	0e 94 42 01 	call	0x284	; 0x284 <button_pushed>
    1222:	8f 3f       	cpi	r24, 0xFF	; 255
    1224:	11 f0       	breq	.+4      	; 0x122a <handle_game_over+0xc2>
			main();
    1226:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <main>
		printf_P(PSTR("Press a button to start again"));
	}
	
	PORTC = 0x00;
	
	while (button_pushed() == NO_BUTTON_PUSHED) {
    122a:	0e 94 42 01 	call	0x284	; 0x284 <button_pushed>
    122e:	8f 3f       	cpi	r24, 0xFF	; 255
    1230:	31 f3       	breq	.-52     	; 0x11fe <handle_game_over+0x96>
		}
		if (serial_input == 's' || serial_input == 'S' || button_pushed() != NO_BUTTON_PUSHED) {
			main();
		}
	}
	main();
    1232:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <main>
    1236:	08 95       	ret

00001238 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    1238:	2f 92       	push	r2
    123a:	3f 92       	push	r3
    123c:	4f 92       	push	r4
    123e:	5f 92       	push	r5
    1240:	6f 92       	push	r6
    1242:	7f 92       	push	r7
    1244:	8f 92       	push	r8
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	ac 97       	sbiw	r28, 0x2c	; 44
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
	
	uint32_t last_flash_time, current_time, current_time2, current_time3, current_time4, last_time;
	uint32_t last_second, last_ms, start_time, end_time;
	uint8_t btn; // The button pushed
	uint8_t seven_seg[10] = {63,6,91,79,102,109,125,7,127,111};
    126c:	8a e0       	ldi	r24, 0x0A	; 10
    126e:	e7 e1       	ldi	r30, 0x17	; 23
    1270:	f1 e0       	ldi	r31, 0x01	; 1
    1272:	de 01       	movw	r26, r28
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	01 90       	ld	r0, Z+
    1278:	0d 92       	st	X+, r0
    127a:	8a 95       	dec	r24
    127c:	e1 f7       	brne	.-8      	; 0x1276 <play_game+0x3e>
	uint8_t seven_seg_dice[10] = {63,6,91,79,102,109,125};
    127e:	fe 01       	movw	r30, r28
    1280:	3b 96       	adiw	r30, 0x0b	; 11
    1282:	8a e0       	ldi	r24, 0x0A	; 10
    1284:	df 01       	movw	r26, r30
    1286:	1d 92       	st	X+, r1
    1288:	8a 95       	dec	r24
    128a:	e9 f7       	brne	.-6      	; 0x1286 <play_game+0x4e>
    128c:	8f e3       	ldi	r24, 0x3F	; 63
    128e:	8b 87       	std	Y+11, r24	; 0x0b
    1290:	96 e0       	ldi	r25, 0x06	; 6
    1292:	9c 87       	std	Y+12, r25	; 0x0c
    1294:	9b e5       	ldi	r25, 0x5B	; 91
    1296:	9d 87       	std	Y+13, r25	; 0x0d
    1298:	9f e4       	ldi	r25, 0x4F	; 79
    129a:	9e 87       	std	Y+14, r25	; 0x0e
    129c:	96 e6       	ldi	r25, 0x66	; 102
    129e:	9f 87       	std	Y+15, r25	; 0x0f
    12a0:	9d e6       	ldi	r25, 0x6D	; 109
    12a2:	98 8b       	std	Y+16, r25	; 0x10
    12a4:	9d e7       	ldi	r25, 0x7D	; 125
    12a6:	99 8b       	std	Y+17, r25	; 0x11
	int first = 1;
	int first2 = 1;
	int first3 = 1;
	roll = 0;
    12a8:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <roll+0x1>
    12ac:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <roll>
		
	DDRC = 0xFF;
    12b0:	9f ef       	ldi	r25, 0xFF	; 255
    12b2:	97 b9       	out	0x07, r25	; 7
	PORTC = 63;
    12b4:	88 b9       	out	0x08, r24	; 8
	DDRD |= (1<<2);
    12b6:	8a b1       	in	r24, 0x0a	; 10
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	8a b9       	out	0x0a, r24	; 10
	count = 0;
    12bc:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <count+0x1>
    12c0:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <count>
	
	last_flash_time = get_current_time();
    12c4:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    12c8:	4b 01       	movw	r8, r22
    12ca:	5c 01       	movw	r10, r24
	last_time = get_current_time();
    12cc:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    12d0:	2b 01       	movw	r4, r22
    12d2:	3c 01       	movw	r6, r24
	last_second = get_current_time();
    12d4:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    12d8:	69 a3       	std	Y+33, r22	; 0x21
    12da:	7a a3       	std	Y+34, r23	; 0x22
    12dc:	8b a3       	std	Y+35, r24	; 0x23
    12de:	9c a3       	std	Y+36, r25	; 0x24
	last_ms = get_current_time();
    12e0:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    12e4:	6d a3       	std	Y+37, r22	; 0x25
    12e6:	7e a3       	std	Y+38, r23	; 0x26
    12e8:	8f a3       	std	Y+39, r24	; 0x27
    12ea:	98 a7       	std	Y+40, r25	; 0x28
	uint8_t btn; // The button pushed
	uint8_t seven_seg[10] = {63,6,91,79,102,109,125,7,127,111};
	uint8_t seven_seg_dice[10] = {63,6,91,79,102,109,125};
	int first = 1;
	int first2 = 1;
	int first3 = 1;
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3a a7       	std	Y+42, r19	; 0x2a
    12f2:	29 a7       	std	Y+41, r18	; 0x29
	uint32_t last_flash_time, current_time, current_time2, current_time3, current_time4, last_time;
	uint32_t last_second, last_ms, start_time, end_time;
	uint8_t btn; // The button pushed
	uint8_t seven_seg[10] = {63,6,91,79,102,109,125,7,127,111};
	uint8_t seven_seg_dice[10] = {63,6,91,79,102,109,125};
	int first = 1;
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	5c a7       	std	Y+44, r21	; 0x2c
    12fa:	4b a7       	std	Y+43, r20	; 0x2b
	last_time = get_current_time();
	last_second = get_current_time();
	last_ms = get_current_time();
	
	// We play the game until it's over
	while(!is_game_over()) {
    12fc:	bf c4       	rjmp	.+2430   	; 0x1c7c <play_game+0xa44>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
    12fe:	0e 94 42 01 	call	0x284	; 0x284 <button_pushed>
    1302:	18 2f       	mov	r17, r24
		
		if (btn == BUTTON0_PUSHED) {
    1304:	81 11       	cpse	r24, r1
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <play_game+0xde>
			// If button 0 is pushed, move the player 1 space forward
			move_player_n(1);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <move_player_n>
			last_flash_time = get_current_time();
    130e:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1312:	4b 01       	movw	r8, r22
    1314:	5c 01       	movw	r10, r24
		}
		
		if (btn == BUTTON1_PUSHED) {
    1316:	11 30       	cpi	r17, 0x01	; 1
    1318:	39 f4       	brne	.+14     	; 0x1328 <play_game+0xf0>
			// If button 1 is pushed, move the player 2 space forward
			move_player_n(2);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <move_player_n>
			last_flash_time = get_current_time();
    1320:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1324:	4b 01       	movw	r8, r22
    1326:	5c 01       	movw	r10, r24
		}
		
		// Check if WASD is pressed and implement
		char serial_input = -1;
			if (serial_input_available()) {
    1328:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <serial_input_available>
    132c:	88 23       	and	r24, r24
    132e:	41 f0       	breq	.+16     	; 0x1340 <play_game+0x108>
				serial_input = fgetc(stdin);
    1330:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <__iob>
    1334:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <__iob+0x1>
    1338:	0e 94 98 10 	call	0x2130	; 0x2130 <fgetc>
    133c:	08 2f       	mov	r16, r24
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <play_game+0x10a>
			move_player_n(2);
			last_flash_time = get_current_time();
		}
		
		// Check if WASD is pressed and implement
		char serial_input = -1;
    1340:	0f ef       	ldi	r16, 0xFF	; 255
			if (serial_input_available()) {
				serial_input = fgetc(stdin);
			}
		if (serial_input == 'w' || serial_input == 'W' ) {
    1342:	07 37       	cpi	r16, 0x77	; 119
    1344:	11 f0       	breq	.+4      	; 0x134a <play_game+0x112>
    1346:	07 35       	cpi	r16, 0x57	; 87
    1348:	41 f4       	brne	.+16     	; 0x135a <play_game+0x122>
			move_player(0, 1);
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 b2 05 	call	0xb64	; 0xb64 <move_player>
			last_flash_time = get_current_time();
    1352:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1356:	4b 01       	movw	r8, r22
    1358:	5c 01       	movw	r10, r24
		}
		if (serial_input == 'a' || serial_input == 'A' ) {
    135a:	01 36       	cpi	r16, 0x61	; 97
    135c:	11 f0       	breq	.+4      	; 0x1362 <play_game+0x12a>
    135e:	01 34       	cpi	r16, 0x41	; 65
    1360:	41 f4       	brne	.+16     	; 0x1372 <play_game+0x13a>
			move_player(-1, 0);
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	0e 94 b2 05 	call	0xb64	; 0xb64 <move_player>
			last_flash_time = get_current_time();
    136a:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    136e:	4b 01       	movw	r8, r22
    1370:	5c 01       	movw	r10, r24
		}
		if (serial_input == 's' || serial_input == 'S' ) {
    1372:	03 37       	cpi	r16, 0x73	; 115
    1374:	11 f0       	breq	.+4      	; 0x137a <play_game+0x142>
    1376:	03 35       	cpi	r16, 0x53	; 83
    1378:	41 f4       	brne	.+16     	; 0x138a <play_game+0x152>
			move_player(0, -1);
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 b2 05 	call	0xb64	; 0xb64 <move_player>
			last_flash_time = get_current_time();
    1382:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1386:	4b 01       	movw	r8, r22
    1388:	5c 01       	movw	r10, r24
		}
		if (serial_input == 'd' || serial_input == 'D' ) {
    138a:	04 36       	cpi	r16, 0x64	; 100
    138c:	11 f0       	breq	.+4      	; 0x1392 <play_game+0x15a>
    138e:	04 34       	cpi	r16, 0x44	; 68
    1390:	41 f4       	brne	.+16     	; 0x13a2 <play_game+0x16a>
			move_player(1, 0);
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 b2 05 	call	0xb64	; 0xb64 <move_player>
			last_flash_time = get_current_time();
    139a:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    139e:	4b 01       	movw	r8, r22
    13a0:	5c 01       	movw	r10, r24
		}
		
		if (serial_input == 'e' || serial_input == 'E') {
    13a2:	05 36       	cpi	r16, 0x65	; 101
    13a4:	11 f0       	breq	.+4      	; 0x13aa <play_game+0x172>
    13a6:	05 34       	cpi	r16, 0x45	; 69
    13a8:	31 f4       	brne	.+12     	; 0x13b6 <play_game+0x17e>
			timer = 0;
    13aa:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <timer+0x1>
    13ae:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <timer>
			clear_terminal();
    13b2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <clear_terminal>
		}
		
		if (serial_input == 'm' || serial_input == 'M') {
    13b6:	0d 36       	cpi	r16, 0x6D	; 109
    13b8:	11 f0       	breq	.+4      	; 0x13be <play_game+0x186>
    13ba:	0d 34       	cpi	r16, 0x4D	; 77
    13bc:	81 f4       	brne	.+32     	; 0x13de <play_game+0x1a6>
			time = 90;
    13be:	8a e5       	ldi	r24, 0x5A	; 90
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    13c6:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
			time2 = 90;
    13ca:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <time2+0x1>
    13ce:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <time2>
			timer = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <timer+0x1>
    13da:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timer>
		}
		
		if (serial_input == 'h' || serial_input == 'H') {
    13de:	08 36       	cpi	r16, 0x68	; 104
    13e0:	11 f0       	breq	.+4      	; 0x13e6 <play_game+0x1ae>
    13e2:	08 34       	cpi	r16, 0x48	; 72
    13e4:	81 f4       	brne	.+32     	; 0x1406 <play_game+0x1ce>
			time = 45;
    13e6:	8d e2       	ldi	r24, 0x2D	; 45
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    13ee:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
			time2 = 45;
    13f2:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <time2+0x1>
    13f6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <time2>
			timer = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <timer+0x1>
    1402:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timer>
		}
		
		// Update time for flash, dice and timer
		current_time = get_current_time();
    1406:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    140a:	6b 01       	movw	r12, r22
    140c:	7c 01       	movw	r14, r24
		current_time2 = get_current_time();
    140e:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1412:	6d 8b       	std	Y+21, r22	; 0x15
    1414:	7e 8b       	std	Y+22, r23	; 0x16
    1416:	8f 8b       	std	Y+23, r24	; 0x17
    1418:	98 8f       	std	Y+24, r25	; 0x18
		current_time3 = get_current_time();
    141a:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    141e:	69 8f       	std	Y+25, r22	; 0x19
    1420:	7a 8f       	std	Y+26, r23	; 0x1a
    1422:	8b 8f       	std	Y+27, r24	; 0x1b
    1424:	9c 8f       	std	Y+28, r25	; 0x1c
		current_time4 = get_current_time();
    1426:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    142a:	6d 8f       	std	Y+29, r22	; 0x1d
    142c:	7e 8f       	std	Y+30, r23	; 0x1e
    142e:	8f 8f       	std	Y+31, r24	; 0x1f
    1430:	98 a3       	std	Y+32, r25	; 0x20
		
		if (timer) {
    1432:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <timer>
    1436:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <timer+0x1>
    143a:	89 2b       	or	r24, r25
    143c:	09 f4       	brne	.+2      	; 0x1440 <play_game+0x208>
    143e:	58 c2       	rjmp	.+1200   	; 0x18f0 <play_game+0x6b8>
			if (get_two_players() == 0){
    1440:	0e 94 64 02 	call	0x4c8	; 0x4c8 <get_two_players>
    1444:	89 2b       	or	r24, r25
    1446:	09 f0       	breq	.+2      	; 0x144a <play_game+0x212>
    1448:	c2 c0       	rjmp	.+388    	; 0x15ce <play_game+0x396>
				if (current_time3 >= last_second + 1000){
    144a:	89 a1       	ldd	r24, Y+33	; 0x21
    144c:	9a a1       	ldd	r25, Y+34	; 0x22
    144e:	ab a1       	ldd	r26, Y+35	; 0x23
    1450:	bc a1       	ldd	r27, Y+36	; 0x24
    1452:	88 51       	subi	r24, 0x18	; 24
    1454:	9c 4f       	sbci	r25, 0xFC	; 252
    1456:	af 4f       	sbci	r26, 0xFF	; 255
    1458:	bf 4f       	sbci	r27, 0xFF	; 255
    145a:	29 8d       	ldd	r18, Y+25	; 0x19
    145c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    145e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1460:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	4a 07       	cpc	r20, r26
    1468:	5b 07       	cpc	r21, r27
    146a:	08 f4       	brcc	.+2      	; 0x146e <play_game+0x236>
    146c:	4a c0       	rjmp	.+148    	; 0x1502 <play_game+0x2ca>
					time --;
    146e:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    1472:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    147c:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
					last_second = get_current_time();
    1480:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1484:	69 a3       	std	Y+33, r22	; 0x21
    1486:	7a a3       	std	Y+34, r23	; 0x22
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
					if (time >= 10) {
    148c:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    1490:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    1494:	0a 97       	sbiw	r24, 0x0a	; 10
    1496:	ac f1       	brlt	.+106    	; 0x1502 <play_game+0x2ca>
						if (first) {
    1498:	4b a5       	ldd	r20, Y+43	; 0x2b
    149a:	5c a5       	ldd	r21, Y+44	; 0x2c
    149c:	45 2b       	or	r20, r21
    149e:	c9 f0       	breq	.+50     	; 0x14d2 <play_game+0x29a>
							move_terminal_cursor(10,12);
    14a0:	6c e0       	ldi	r22, 0x0C	; 12
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
							printf_P(PSTR("Time remaining: %d s"), time);
    14ac:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    14b0:	8f 93       	push	r24
    14b2:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    14b6:	8f 93       	push	r24
    14b8:	8a e4       	ldi	r24, 0x4A	; 74
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9f 93       	push	r25
    14be:	8f 93       	push	r24
    14c0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
							first = 0;
    14cc:	1c a6       	std	Y+44, r1	; 0x2c
    14ce:	1b a6       	std	Y+43, r1	; 0x2b
    14d0:	18 c0       	rjmp	.+48     	; 0x1502 <play_game+0x2ca>
						} else {
							move_terminal_cursor(26,12);
    14d2:	6c e0       	ldi	r22, 0x0C	; 12
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	8a e1       	ldi	r24, 0x1A	; 26
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
							clear_to_end_of_line();
    14de:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_to_end_of_line>
							printf_P(PSTR("%d s"), time);
    14e2:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    14e6:	8f 93       	push	r24
    14e8:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    14ec:	8f 93       	push	r24
    14ee:	85 e4       	ldi	r24, 0x45	; 69
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	9f 93       	push	r25
    14f4:	8f 93       	push	r24
    14f6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
						}
					}
				}
				if (time < 10) {
    1502:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    1506:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    150a:	0a 97       	sbiw	r24, 0x0a	; 10
    150c:	0c f0       	brlt	.+2      	; 0x1510 <play_game+0x2d8>
    150e:	5f c0       	rjmp	.+190    	; 0x15ce <play_game+0x396>
					if (current_time4 >= last_ms + 100) {
    1510:	8d a1       	ldd	r24, Y+37	; 0x25
    1512:	9e a1       	ldd	r25, Y+38	; 0x26
    1514:	af a1       	ldd	r26, Y+39	; 0x27
    1516:	b8 a5       	ldd	r27, Y+40	; 0x28
    1518:	8c 59       	subi	r24, 0x9C	; 156
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	af 4f       	sbci	r26, 0xFF	; 255
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1522:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1524:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1526:	58 a1       	ldd	r21, Y+32	; 0x20
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	4a 07       	cpc	r20, r26
    152e:	5b 07       	cpc	r21, r27
    1530:	d8 f1       	brcs	.+118    	; 0x15a8 <play_game+0x370>
						if (ms > 0){
    1532:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ms>
    1536:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ms+0x1>
    153a:	18 16       	cp	r1, r24
    153c:	19 06       	cpc	r1, r25
    153e:	34 f4       	brge	.+12     	; 0x154c <play_game+0x314>
							ms --;
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ms+0x1>
    1546:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ms>
    154a:	08 c0       	rjmp	.+16     	; 0x155c <play_game+0x324>
							} else if (ms == 0) {
    154c:	89 2b       	or	r24, r25
    154e:	31 f4       	brne	.+12     	; 0x155c <play_game+0x324>
							ms = 9;
    1550:	89 e0       	ldi	r24, 0x09	; 9
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ms+0x1>
    1558:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ms>
						}
						move_terminal_cursor(27,12);
    155c:	6c e0       	ldi	r22, 0x0C	; 12
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	8b e1       	ldi	r24, 0x1B	; 27
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
						clear_to_end_of_line();
    1568:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_to_end_of_line>
						printf_P(PSTR("%d . %d s"), time, ms);
    156c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ms+0x1>
    1570:	8f 93       	push	r24
    1572:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ms>
    1576:	8f 93       	push	r24
    1578:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    157c:	8f 93       	push	r24
    157e:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    1582:	8f 93       	push	r24
    1584:	8b e3       	ldi	r24, 0x3B	; 59
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	9f 93       	push	r25
    158a:	8f 93       	push	r24
    158c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
						last_ms = get_current_time();
    1590:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1594:	6d a3       	std	Y+37, r22	; 0x25
    1596:	7e a3       	std	Y+38, r23	; 0x26
    1598:	8f a3       	std	Y+39, r24	; 0x27
    159a:	98 a7       	std	Y+40, r25	; 0x28
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
					}
					if (time <= 0) {
    15a8:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    15ac:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    15b0:	18 16       	cp	r1, r24
    15b2:	19 06       	cpc	r1, r25
    15b4:	64 f0       	brlt	.+24     	; 0x15ce <play_game+0x396>
						winner = 1 - (get_player_2_turn()) + 1;
    15b6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    15ba:	22 e0       	ldi	r18, 0x02	; 2
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	28 1b       	sub	r18, r24
    15c0:	39 0b       	sbc	r19, r25
    15c2:	30 93 8d 03 	sts	0x038D, r19	; 0x80038d <winner+0x1>
    15c6:	20 93 8c 03 	sts	0x038C, r18	; 0x80038c <winner>
						handle_game_over();
    15ca:	0e 94 b4 08 	call	0x1168	; 0x1168 <handle_game_over>
					}
				}
			}
			
			if (get_two_players()) {
    15ce:	0e 94 64 02 	call	0x4c8	; 0x4c8 <get_two_players>
    15d2:	89 2b       	or	r24, r25
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <play_game+0x3a0>
    15d6:	8c c1       	rjmp	.+792    	; 0x18f0 <play_game+0x6b8>
				if (first3) {
    15d8:	49 a5       	ldd	r20, Y+41	; 0x29
    15da:	5a a5       	ldd	r21, Y+42	; 0x2a
    15dc:	45 2b       	or	r20, r21
    15de:	59 f1       	breq	.+86     	; 0x1636 <play_game+0x3fe>
					move_terminal_cursor(10,12);
    15e0:	6c e0       	ldi	r22, 0x0C	; 12
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	8a e0       	ldi	r24, 0x0A	; 10
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
					printf("Player 1 time remaining: %d s", time);
    15ec:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    15f0:	8f 93       	push	r24
    15f2:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    15f6:	8f 93       	push	r24
    15f8:	81 eb       	ldi	r24, 0xB1	; 177
    15fa:	92 e0       	ldi	r25, 0x02	; 2
    15fc:	9f 93       	push	r25
    15fe:	8f 93       	push	r24
    1600:	0e 94 d6 10 	call	0x21ac	; 0x21ac <printf>
					move_terminal_cursor(10,14);
    1604:	6e e0       	ldi	r22, 0x0E	; 14
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	8a e0       	ldi	r24, 0x0A	; 10
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
					printf("Player 2 time remaining: %d s", time2);
    1610:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <time2+0x1>
    1614:	8f 93       	push	r24
    1616:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <time2>
    161a:	8f 93       	push	r24
    161c:	8f ec       	ldi	r24, 0xCF	; 207
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	0e 94 d6 10 	call	0x21ac	; 0x21ac <printf>
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
					first3 = 0;
    1632:	1a a6       	std	Y+42, r1	; 0x2a
    1634:	19 a6       	std	Y+41, r1	; 0x29
				}
				if ((current_time3 >= last_second + 1000)) {
    1636:	89 a1       	ldd	r24, Y+33	; 0x21
    1638:	9a a1       	ldd	r25, Y+34	; 0x22
    163a:	ab a1       	ldd	r26, Y+35	; 0x23
    163c:	bc a1       	ldd	r27, Y+36	; 0x24
    163e:	88 51       	subi	r24, 0x18	; 24
    1640:	9c 4f       	sbci	r25, 0xFC	; 252
    1642:	af 4f       	sbci	r26, 0xFF	; 255
    1644:	bf 4f       	sbci	r27, 0xFF	; 255
    1646:	29 8d       	ldd	r18, Y+25	; 0x19
    1648:	3a 8d       	ldd	r19, Y+26	; 0x1a
    164a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    164c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    164e:	28 17       	cp	r18, r24
    1650:	39 07       	cpc	r19, r25
    1652:	4a 07       	cpc	r20, r26
    1654:	5b 07       	cpc	r21, r27
    1656:	08 f4       	brcc	.+2      	; 0x165a <play_game+0x422>
    1658:	74 c0       	rjmp	.+232    	; 0x1742 <play_game+0x50a>
					if (get_player_2_turn() == 0){
    165a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    165e:	89 2b       	or	r24, r25
    1660:	09 f0       	breq	.+2      	; 0x1664 <play_game+0x42c>
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <play_game+0x4b0>
						time --;
    1664:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    1668:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time+0x1>
    1672:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time>
						if (time >= 10) {
    1676:	0a 97       	sbiw	r24, 0x0a	; 10
    1678:	0c f4       	brge	.+2      	; 0x167c <play_game+0x444>
    167a:	5d c0       	rjmp	.+186    	; 0x1736 <play_game+0x4fe>
							if (first) {
    167c:	4b a5       	ldd	r20, Y+43	; 0x2b
    167e:	5c a5       	ldd	r21, Y+44	; 0x2c
    1680:	45 2b       	or	r20, r21
    1682:	c9 f0       	breq	.+50     	; 0x16b6 <play_game+0x47e>
								move_terminal_cursor(10,12);
    1684:	6c e0       	ldi	r22, 0x0C	; 12
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	8a e0       	ldi	r24, 0x0A	; 10
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
								printf_P(PSTR("Player 1 time remaining: %d s"), time);
    1690:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    1694:	8f 93       	push	r24
    1696:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    169a:	8f 93       	push	r24
    169c:	8d e1       	ldi	r24, 0x1D	; 29
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	9f 93       	push	r25
    16a2:	8f 93       	push	r24
    16a4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
								first = 0;
    16b0:	1c a6       	std	Y+44, r1	; 0x2c
    16b2:	1b a6       	std	Y+43, r1	; 0x2b
    16b4:	40 c0       	rjmp	.+128    	; 0x1736 <play_game+0x4fe>
								} else {
								move_terminal_cursor(35,12);
    16b6:	6c e0       	ldi	r22, 0x0C	; 12
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	83 e2       	ldi	r24, 0x23	; 35
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
								clear_to_end_of_line();
    16c2:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_to_end_of_line>
								printf_P(PSTR("%d s"), time);
    16c6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    16ca:	8f 93       	push	r24
    16cc:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    16d0:	8f 93       	push	r24
    16d2:	88 e1       	ldi	r24, 0x18	; 24
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	9f 93       	push	r25
    16d8:	8f 93       	push	r24
    16da:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	27 c0       	rjmp	.+78     	; 0x1736 <play_game+0x4fe>
							}
						}
					} else if (get_player_2_turn()) {
    16e8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    16ec:	89 2b       	or	r24, r25
    16ee:	19 f1       	breq	.+70     	; 0x1736 <play_game+0x4fe>
						time2 --;
    16f0:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <time2>
    16f4:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <time2+0x1>
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <time2+0x1>
    16fe:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <time2>
						if (time2 >= 10) {
    1702:	0a 97       	sbiw	r24, 0x0a	; 10
    1704:	c4 f0       	brlt	.+48     	; 0x1736 <play_game+0x4fe>
							if (first2) {
								move_terminal_cursor(10,14);
    1706:	6e e0       	ldi	r22, 0x0E	; 14
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	8a e0       	ldi	r24, 0x0A	; 10
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
								printf_P(PSTR("Player 2 time remaining: %d s"), time2);
    1712:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <time2+0x1>
    1716:	8f 93       	push	r24
    1718:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <time2>
    171c:	8f 93       	push	r24
    171e:	8a ef       	ldi	r24, 0xFA	; 250
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9f 93       	push	r25
    1724:	8f 93       	push	r24
    1726:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
								first = 0;
    1732:	1c a6       	std	Y+44, r1	; 0x2c
    1734:	1b a6       	std	Y+43, r1	; 0x2b
								printf_P(PSTR("%d s"), time);
							}
						}
					}

					last_second = get_current_time();
    1736:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    173a:	69 a3       	std	Y+33, r22	; 0x21
    173c:	7a a3       	std	Y+34, r23	; 0x22
    173e:	8b a3       	std	Y+35, r24	; 0x23
    1740:	9c a3       	std	Y+36, r25	; 0x24
				}
				if ((time < 10) & !(get_player_2_turn())) {
    1742:	33 24       	eor	r3, r3
    1744:	33 94       	inc	r3
    1746:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    174a:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    174e:	0a 97       	sbiw	r24, 0x0a	; 10
    1750:	0c f0       	brlt	.+2      	; 0x1754 <play_game+0x51c>
    1752:	31 2c       	mov	r3, r1
    1754:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	89 2b       	or	r24, r25
    175c:	09 f0       	breq	.+2      	; 0x1760 <play_game+0x528>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	82 2f       	mov	r24, r18
    1762:	83 21       	and	r24, r3
    1764:	09 f4       	brne	.+2      	; 0x1768 <play_game+0x530>
    1766:	4a c0       	rjmp	.+148    	; 0x17fc <play_game+0x5c4>
					if (current_time4 >= last_ms + 100) {
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	af a1       	ldd	r26, Y+39	; 0x27
    176e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1770:	8c 59       	subi	r24, 0x9C	; 156
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	af 4f       	sbci	r26, 0xFF	; 255
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
    1778:	2d 8d       	ldd	r18, Y+29	; 0x1d
    177a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    177c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    177e:	58 a1       	ldd	r21, Y+32	; 0x20
    1780:	28 17       	cp	r18, r24
    1782:	39 07       	cpc	r19, r25
    1784:	4a 07       	cpc	r20, r26
    1786:	5b 07       	cpc	r21, r27
    1788:	c8 f1       	brcs	.+114    	; 0x17fc <play_game+0x5c4>
						move_terminal_cursor(35,12);
    178a:	6c e0       	ldi	r22, 0x0C	; 12
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	83 e2       	ldi	r24, 0x23	; 35
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
						if (ms > 0){
    1796:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ms>
    179a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ms+0x1>
    179e:	18 16       	cp	r1, r24
    17a0:	19 06       	cpc	r1, r25
    17a2:	34 f4       	brge	.+12     	; 0x17b0 <play_game+0x578>
							ms --;
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ms+0x1>
    17aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ms>
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <play_game+0x588>
							} else if (ms == 0) {
    17b0:	89 2b       	or	r24, r25
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <play_game+0x588>
							ms = 9;
    17b4:	89 e0       	ldi	r24, 0x09	; 9
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ms+0x1>
    17bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ms>
						}
						printf_P(PSTR("%d . %d s"), time, ms);
    17c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ms+0x1>
    17c4:	8f 93       	push	r24
    17c6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ms>
    17ca:	8f 93       	push	r24
    17cc:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <time+0x1>
    17d0:	8f 93       	push	r24
    17d2:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    17d6:	8f 93       	push	r24
    17d8:	80 ef       	ldi	r24, 0xF0	; 240
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9f 93       	push	r25
    17de:	8f 93       	push	r24
    17e0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
						last_ms = get_current_time();
    17e4:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    17e8:	6d a3       	std	Y+37, r22	; 0x25
    17ea:	7e a3       	std	Y+38, r23	; 0x26
    17ec:	8f a3       	std	Y+39, r24	; 0x27
    17ee:	98 a7       	std	Y+40, r25	; 0x28
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
					}
				}
				if ((time2 < 10) & (get_player_2_turn())) {
    17fc:	22 24       	eor	r2, r2
    17fe:	23 94       	inc	r2
    1800:	31 2c       	mov	r3, r1
    1802:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <time2>
    1806:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <time2+0x1>
    180a:	0a 97       	sbiw	r24, 0x0a	; 10
    180c:	14 f0       	brlt	.+4      	; 0x1812 <play_game+0x5da>
    180e:	21 2c       	mov	r2, r1
    1810:	31 2c       	mov	r3, r1
    1812:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    1816:	82 21       	and	r24, r2
    1818:	93 21       	and	r25, r3
    181a:	89 2b       	or	r24, r25
    181c:	09 f4       	brne	.+2      	; 0x1820 <play_game+0x5e8>
    181e:	4a c0       	rjmp	.+148    	; 0x18b4 <play_game+0x67c>
					if (current_time4 >= last_ms + 100) {
    1820:	8d a1       	ldd	r24, Y+37	; 0x25
    1822:	9e a1       	ldd	r25, Y+38	; 0x26
    1824:	af a1       	ldd	r26, Y+39	; 0x27
    1826:	b8 a5       	ldd	r27, Y+40	; 0x28
    1828:	8c 59       	subi	r24, 0x9C	; 156
    182a:	9f 4f       	sbci	r25, 0xFF	; 255
    182c:	af 4f       	sbci	r26, 0xFF	; 255
    182e:	bf 4f       	sbci	r27, 0xFF	; 255
    1830:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1832:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1834:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1836:	58 a1       	ldd	r21, Y+32	; 0x20
    1838:	28 17       	cp	r18, r24
    183a:	39 07       	cpc	r19, r25
    183c:	4a 07       	cpc	r20, r26
    183e:	5b 07       	cpc	r21, r27
    1840:	c8 f1       	brcs	.+114    	; 0x18b4 <play_game+0x67c>
						move_terminal_cursor(35,14);
    1842:	6e e0       	ldi	r22, 0x0E	; 14
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	83 e2       	ldi	r24, 0x23	; 35
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
						if (ms2 > 0){
    184e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ms2>
    1852:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ms2+0x1>
    1856:	18 16       	cp	r1, r24
    1858:	19 06       	cpc	r1, r25
    185a:	34 f4       	brge	.+12     	; 0x1868 <play_game+0x630>
							ms2 --;
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ms2+0x1>
    1862:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ms2>
    1866:	08 c0       	rjmp	.+16     	; 0x1878 <play_game+0x640>
							} else if (ms2 == 0) {
    1868:	89 2b       	or	r24, r25
    186a:	31 f4       	brne	.+12     	; 0x1878 <play_game+0x640>
							ms2 = 9;
    186c:	89 e0       	ldi	r24, 0x09	; 9
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ms2+0x1>
    1874:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ms2>
						}
						printf_P(PSTR("%d . %d s"), time2, ms2);
    1878:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ms2+0x1>
    187c:	8f 93       	push	r24
    187e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ms2>
    1882:	8f 93       	push	r24
    1884:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <time2+0x1>
    1888:	8f 93       	push	r24
    188a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <time2>
    188e:	8f 93       	push	r24
    1890:	86 ee       	ldi	r24, 0xE6	; 230
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9f 93       	push	r25
    1896:	8f 93       	push	r24
    1898:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
						last_ms = get_current_time();
    189c:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    18a0:	6d a3       	std	Y+37, r22	; 0x25
    18a2:	7e a3       	std	Y+38, r23	; 0x26
    18a4:	8f a3       	std	Y+39, r24	; 0x27
    18a6:	98 a7       	std	Y+40, r25	; 0x28
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
					}
				}
				if (time <= 0) {
    18b4:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time>
    18b8:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time+0x1>
    18bc:	18 16       	cp	r1, r24
    18be:	19 06       	cpc	r1, r25
    18c0:	44 f0       	brlt	.+16     	; 0x18d2 <play_game+0x69a>
					winner = 2;
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <winner+0x1>
    18ca:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <winner>
					handle_game_over();
    18ce:	0e 94 b4 08 	call	0x1168	; 0x1168 <handle_game_over>
				}
				if (time2 <= 0) {
    18d2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <time2>
    18d6:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <time2+0x1>
    18da:	18 16       	cp	r1, r24
    18dc:	19 06       	cpc	r1, r25
    18de:	44 f0       	brlt	.+16     	; 0x18f0 <play_game+0x6b8>
					winner = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <winner+0x1>
    18e8:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <winner>
					handle_game_over();
    18ec:	0e 94 b4 08 	call	0x1168	; 0x1168 <handle_game_over>
				}
		}
				}
		
		if (current_time >= last_flash_time + 500) {
    18f0:	d5 01       	movw	r26, r10
    18f2:	c4 01       	movw	r24, r8
    18f4:	8c 50       	subi	r24, 0x0C	; 12
    18f6:	9e 4f       	sbci	r25, 0xFE	; 254
    18f8:	af 4f       	sbci	r26, 0xFF	; 255
    18fa:	bf 4f       	sbci	r27, 0xFF	; 255
    18fc:	c8 16       	cp	r12, r24
    18fe:	d9 06       	cpc	r13, r25
    1900:	ea 06       	cpc	r14, r26
    1902:	fb 06       	cpc	r15, r27
    1904:	20 f0       	brcs	.+8      	; 0x190e <play_game+0x6d6>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_player_cursor();
    1906:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <flash_player_cursor>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
    190a:	46 01       	movw	r8, r12
    190c:	57 01       	movw	r10, r14
		}
		
		// Dice roll
		if (btn == BUTTON2_PUSHED || serial_input == 'R' || serial_input == 'r') {
    190e:	12 30       	cpi	r17, 0x02	; 2
    1910:	29 f0       	breq	.+10     	; 0x191c <play_game+0x6e4>
    1912:	02 35       	cpi	r16, 0x52	; 82
    1914:	19 f0       	breq	.+6      	; 0x191c <play_game+0x6e4>
    1916:	02 37       	cpi	r16, 0x72	; 114
    1918:	09 f0       	breq	.+2      	; 0x191c <play_game+0x6e4>
    191a:	43 c0       	rjmp	.+134    	; 0x19a2 <play_game+0x76a>
			PORTD ^= (1<<2);
    191c:	9b b1       	in	r25, 0x0b	; 11
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	89 27       	eor	r24, r25
    1922:	8b b9       	out	0x0b, r24	; 11
			if (rolling == 1) {
    1924:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rolling>
    1928:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <rolling+0x1>
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	79 f5       	brne	.+94     	; 0x198e <play_game+0x756>
				move_player_n(count);
    1930:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
    1934:	0e 94 52 04 	call	0x8a4	; 0x8a4 <move_player_n>
				if (get_player_2_turn() == 0) {
    1938:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    193c:	89 2b       	or	r24, r25
    193e:	91 f4       	brne	.+36     	; 0x1964 <play_game+0x72c>
					if (num_turns == 9) {
    1940:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <num_turns>
    1944:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <num_turns+0x1>
    1948:	89 30       	cpi	r24, 0x09	; 9
    194a:	91 05       	cpc	r25, r1
    194c:	29 f4       	brne	.+10     	; 0x1958 <play_game+0x720>
						num_turns = 0;
    194e:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <num_turns+0x1>
    1952:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <num_turns>
    1956:	1b c0       	rjmp	.+54     	; 0x198e <play_game+0x756>
						} else {
						num_turns ++;
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <num_turns+0x1>
    195e:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <num_turns>
    1962:	15 c0       	rjmp	.+42     	; 0x198e <play_game+0x756>
					}
				} else if (get_player_2_turn()) {
    1964:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    1968:	89 2b       	or	r24, r25
    196a:	89 f0       	breq	.+34     	; 0x198e <play_game+0x756>
					if (num_turns2 == 9) {
    196c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <num_turns2>
    1970:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <num_turns2+0x1>
    1974:	89 30       	cpi	r24, 0x09	; 9
    1976:	91 05       	cpc	r25, r1
    1978:	29 f4       	brne	.+10     	; 0x1984 <play_game+0x74c>
						num_turns2 = 0;
    197a:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <num_turns2+0x1>
    197e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <num_turns2>
    1982:	05 c0       	rjmp	.+10     	; 0x198e <play_game+0x756>
						} else {
						num_turns2 ++;
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <num_turns2+0x1>
    198a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <num_turns2>
					}
				}
				
			}
			rolling = 1 ^ rolling;
    198e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rolling>
    1992:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <rolling+0x1>
    1996:	31 e0       	ldi	r19, 0x01	; 1
    1998:	83 27       	eor	r24, r19
    199a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <rolling+0x1>
    199e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <rolling>
		}
		
		if (rolling) {
    19a2:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rolling>
    19a6:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <rolling+0x1>
    19aa:	89 2b       	or	r24, r25
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <play_game+0x778>
    19ae:	64 c0       	rjmp	.+200    	; 0x1a78 <play_game+0x840>
			seven_seg_cc = 0;
    19b0:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <seven_seg_cc+0x1>
    19b4:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <seven_seg_cc>
			if (current_time2 >= last_time + 50) {
    19b8:	d3 01       	movw	r26, r6
    19ba:	c2 01       	movw	r24, r4
    19bc:	c2 96       	adiw	r24, 0x32	; 50
    19be:	a1 1d       	adc	r26, r1
    19c0:	b1 1d       	adc	r27, r1
    19c2:	2d 89       	ldd	r18, Y+21	; 0x15
    19c4:	3e 89       	ldd	r19, Y+22	; 0x16
    19c6:	4f 89       	ldd	r20, Y+23	; 0x17
    19c8:	58 8d       	ldd	r21, Y+24	; 0x18
    19ca:	28 17       	cp	r18, r24
    19cc:	39 07       	cpc	r19, r25
    19ce:	4a 07       	cpc	r20, r26
    19d0:	5b 07       	cpc	r21, r27
    19d2:	c8 f0       	brcs	.+50     	; 0x1a06 <play_game+0x7ce>
				if (count == 6) {
    19d4:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
    19d8:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
    19dc:	86 30       	cpi	r24, 0x06	; 6
    19de:	91 05       	cpc	r25, r1
    19e0:	49 f4       	brne	.+18     	; 0x19f4 <play_game+0x7bc>
					count = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <count+0x1>
    19ea:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <count>
				} else {
					count ++;
				}
				last_time = current_time2;
    19ee:	29 01       	movw	r4, r18
    19f0:	3a 01       	movw	r6, r20
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <play_game+0x7ce>
			seven_seg_cc = 0;
			if (current_time2 >= last_time + 50) {
				if (count == 6) {
					count = 1;
				} else {
					count ++;
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <count+0x1>
    19fa:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <count>
				}
				last_time = current_time2;
    19fe:	4d 88       	ldd	r4, Y+21	; 0x15
    1a00:	5e 88       	ldd	r5, Y+22	; 0x16
    1a02:	6f 88       	ldd	r6, Y+23	; 0x17
    1a04:	78 8c       	ldd	r7, Y+24	; 0x18
			}
			if (!roll) {
    1a06:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <roll>
    1a0a:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <roll+0x1>
    1a0e:	89 2b       	or	r24, r25
    1a10:	e9 f4       	brne	.+58     	; 0x1a4c <play_game+0x814>
				move_terminal_cursor(10, 10);
    1a12:	6a e0       	ldi	r22, 0x0A	; 10
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	8a e0       	ldi	r24, 0x0A	; 10
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
				printf_P(PSTR("Dice value: %d"), count);
    1a1e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <count+0x1>
    1a22:	8f 93       	push	r24
    1a24:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
    1a28:	8f 93       	push	r24
    1a2a:	87 ed       	ldi	r24, 0xD7	; 215
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9f 93       	push	r25
    1a30:	8f 93       	push	r24
    1a32:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
				roll = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <roll+0x1>
    1a3e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <roll>
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <play_game+0x840>
				} else {
				move_terminal_cursor(22, 10);
    1a4c:	6a e0       	ldi	r22, 0x0A	; 10
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	86 e1       	ldi	r24, 0x16	; 22
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <move_terminal_cursor>
				printf_P(PSTR("%d"), count);
    1a58:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <count+0x1>
    1a5c:	8f 93       	push	r24
    1a5e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
    1a62:	8f 93       	push	r24
    1a64:	84 ed       	ldi	r24, 0xD4	; 212
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
			}
		}	
		
		// Toggles CC pin
		if (seven_seg_cc == 0) {
    1a78:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1a7c:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1a80:	89 2b       	or	r24, r25
    1a82:	41 f5       	brne	.+80     	; 0x1ad4 <play_game+0x89c>
			PORTC = seven_seg_dice[count];
    1a84:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <count>
    1a88:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <count+0x1>
    1a8c:	4b e0       	ldi	r20, 0x0B	; 11
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	4c 0f       	add	r20, r28
    1a92:	5d 1f       	adc	r21, r29
    1a94:	e4 0f       	add	r30, r20
    1a96:	f5 1f       	adc	r31, r21
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 b9       	out	0x08, r24	; 8
			PORTC |= (seven_seg_cc<<7);
    1a9c:	28 b1       	in	r18, 0x08	; 8
    1a9e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1aa2:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1aa6:	96 95       	lsr	r25
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	88 27       	eor	r24, r24
    1aac:	97 95       	ror	r25
    1aae:	87 95       	ror	r24
    1ab0:	82 2b       	or	r24, r18
    1ab2:	88 b9       	out	0x08, r24	; 8
			seven_seg_cc = 1 ^ seven_seg_cc;
    1ab4:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1ab8:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1abc:	51 e0       	ldi	r21, 0x01	; 1
    1abe:	85 27       	eor	r24, r21
    1ac0:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <seven_seg_cc+0x1>
    1ac4:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <seven_seg_cc>
    1ac8:	8f e0       	ldi	r24, 0x0F	; 15
    1aca:	97 e2       	ldi	r25, 0x27	; 39
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <play_game+0x894>
    1ad0:	00 c0       	rjmp	.+0      	; 0x1ad2 <play_game+0x89a>
    1ad2:	00 00       	nop
			_delay_ms(5);
		}
		
		if (seven_seg_cc == 1) {
    1ad4:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1ad8:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	41 f5       	brne	.+80     	; 0x1b30 <play_game+0x8f8>
			PORTC =seven_seg[num_turns];
    1ae0:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <num_turns>
    1ae4:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <num_turns+0x1>
    1ae8:	a1 e0       	ldi	r26, 0x01	; 1
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ac 0f       	add	r26, r28
    1aee:	bd 1f       	adc	r27, r29
    1af0:	ea 0f       	add	r30, r26
    1af2:	fb 1f       	adc	r31, r27
    1af4:	80 81       	ld	r24, Z
    1af6:	88 b9       	out	0x08, r24	; 8
			PORTC |= (seven_seg_cc<<7);
    1af8:	28 b1       	in	r18, 0x08	; 8
    1afa:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1afe:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1b02:	96 95       	lsr	r25
    1b04:	98 2f       	mov	r25, r24
    1b06:	88 27       	eor	r24, r24
    1b08:	97 95       	ror	r25
    1b0a:	87 95       	ror	r24
    1b0c:	82 2b       	or	r24, r18
    1b0e:	88 b9       	out	0x08, r24	; 8
			seven_seg_cc = 1 ^ seven_seg_cc;
    1b10:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1b14:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1b18:	b1 e0       	ldi	r27, 0x01	; 1
    1b1a:	8b 27       	eor	r24, r27
    1b1c:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <seven_seg_cc+0x1>
    1b20:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <seven_seg_cc>
    1b24:	8f e0       	ldi	r24, 0x0F	; 15
    1b26:	97 e2       	ldi	r25, 0x27	; 39
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <play_game+0x8f0>
    1b2c:	00 c0       	rjmp	.+0      	; 0x1b2e <play_game+0x8f6>
    1b2e:	00 00       	nop
			_delay_ms(5);
		}
		
		// Game Pause
		if (btn == BUTTON3_PUSHED || serial_input == 'p' || serial_input == 'P'){
    1b30:	13 30       	cpi	r17, 0x03	; 3
    1b32:	29 f0       	breq	.+10     	; 0x1b3e <play_game+0x906>
    1b34:	00 37       	cpi	r16, 0x70	; 112
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <play_game+0x906>
    1b38:	00 35       	cpi	r16, 0x50	; 80
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <play_game+0x906>
    1b3c:	8c c0       	rjmp	.+280    	; 0x1c56 <play_game+0xa1e>
			start_time = get_current_time();
    1b3e:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1b42:	6b 01       	movw	r12, r22
    1b44:	7c 01       	movw	r14, r24
			// Keep the cc toggling going
			while (serial_input != 'p' || serial_input != 'P') {
				if (seven_seg_cc == 0) {
    1b46:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1b4a:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1b4e:	89 2b       	or	r24, r25
    1b50:	41 f5       	brne	.+80     	; 0x1ba2 <play_game+0x96a>
					PORTC = seven_seg_dice[count];
    1b52:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <count>
    1b56:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <count+0x1>
    1b5a:	ab e0       	ldi	r26, 0x0B	; 11
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ac 0f       	add	r26, r28
    1b60:	bd 1f       	adc	r27, r29
    1b62:	ea 0f       	add	r30, r26
    1b64:	fb 1f       	adc	r31, r27
    1b66:	80 81       	ld	r24, Z
    1b68:	88 b9       	out	0x08, r24	; 8
					PORTC |= (seven_seg_cc<<7);
    1b6a:	28 b1       	in	r18, 0x08	; 8
    1b6c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1b70:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1b74:	96 95       	lsr	r25
    1b76:	98 2f       	mov	r25, r24
    1b78:	88 27       	eor	r24, r24
    1b7a:	97 95       	ror	r25
    1b7c:	87 95       	ror	r24
    1b7e:	82 2b       	or	r24, r18
    1b80:	88 b9       	out	0x08, r24	; 8
					seven_seg_cc = 1 ^ seven_seg_cc;
    1b82:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1b86:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1b8a:	b1 e0       	ldi	r27, 0x01	; 1
    1b8c:	8b 27       	eor	r24, r27
    1b8e:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <seven_seg_cc+0x1>
    1b92:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <seven_seg_cc>
    1b96:	8f e0       	ldi	r24, 0x0F	; 15
    1b98:	97 e2       	ldi	r25, 0x27	; 39
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <play_game+0x962>
    1b9e:	00 c0       	rjmp	.+0      	; 0x1ba0 <play_game+0x968>
    1ba0:	00 00       	nop
					_delay_ms(5);
				}
				
				if (seven_seg_cc == 1) {
    1ba2:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1ba6:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	41 f5       	brne	.+80     	; 0x1bfe <play_game+0x9c6>
					PORTC =seven_seg[num_turns];
    1bae:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <num_turns>
    1bb2:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <num_turns+0x1>
    1bb6:	a1 e0       	ldi	r26, 0x01	; 1
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ac 0f       	add	r26, r28
    1bbc:	bd 1f       	adc	r27, r29
    1bbe:	ea 0f       	add	r30, r26
    1bc0:	fb 1f       	adc	r31, r27
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 b9       	out	0x08, r24	; 8
					PORTC |= (seven_seg_cc<<7);
    1bc6:	28 b1       	in	r18, 0x08	; 8
    1bc8:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1bcc:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1bd0:	96 95       	lsr	r25
    1bd2:	98 2f       	mov	r25, r24
    1bd4:	88 27       	eor	r24, r24
    1bd6:	97 95       	ror	r25
    1bd8:	87 95       	ror	r24
    1bda:	82 2b       	or	r24, r18
    1bdc:	88 b9       	out	0x08, r24	; 8
					seven_seg_cc = 1 ^ seven_seg_cc;
    1bde:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <seven_seg_cc>
    1be2:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <seven_seg_cc+0x1>
    1be6:	b1 e0       	ldi	r27, 0x01	; 1
    1be8:	8b 27       	eor	r24, r27
    1bea:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <seven_seg_cc+0x1>
    1bee:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <seven_seg_cc>
    1bf2:	8f e0       	ldi	r24, 0x0F	; 15
    1bf4:	97 e2       	ldi	r25, 0x27	; 39
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <play_game+0x9be>
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <play_game+0x9c4>
    1bfc:	00 00       	nop
					_delay_ms(5);
				}
				
				char serial_input = -1;
				if (serial_input_available()) {
    1bfe:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <serial_input_available>
    1c02:	88 23       	and	r24, r24
    1c04:	39 f0       	breq	.+14     	; 0x1c14 <play_game+0x9dc>
					serial_input = fgetc(stdin);
    1c06:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <__iob>
    1c0a:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <__iob+0x1>
    1c0e:	0e 94 98 10 	call	0x2130	; 0x2130 <fgetc>
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <play_game+0x9de>
					PORTC |= (seven_seg_cc<<7);
					seven_seg_cc = 1 ^ seven_seg_cc;
					_delay_ms(5);
				}
				
				char serial_input = -1;
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
				if (serial_input_available()) {
					serial_input = fgetc(stdin);
				}
				if ((serial_input == 'p' || serial_input == 'P') & (start_time != get_current_time())) {
    1c16:	80 37       	cpi	r24, 0x70	; 112
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <play_game+0x9ea>
    1c1a:	80 35       	cpi	r24, 0x50	; 80
    1c1c:	21 f4       	brne	.+8      	; 0x1c26 <play_game+0x9ee>
    1c1e:	11 e0       	ldi	r17, 0x01	; 1
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <play_game+0x9f0>
    1c22:	11 e0       	ldi	r17, 0x01	; 1
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <play_game+0x9f0>
    1c26:	10 e0       	ldi	r17, 0x00	; 0
    1c28:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
    1c2c:	21 e0       	ldi	r18, 0x01	; 1
    1c2e:	c6 16       	cp	r12, r22
    1c30:	d7 06       	cpc	r13, r23
    1c32:	e8 06       	cpc	r14, r24
    1c34:	f9 06       	cpc	r15, r25
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <play_game+0xa02>
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	81 2f       	mov	r24, r17
    1c3c:	82 23       	and	r24, r18
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <play_game+0xa0a>
    1c40:	82 cf       	rjmp	.-252    	; 0x1b46 <play_game+0x90e>
					break;
				}
			}
			// After while loop is over, update times
			end_time = get_current_time();
    1c42:	0e 94 22 10 	call	0x2044	; 0x2044 <get_current_time>
			last_flash_time = last_flash_time + (start_time - end_time);
    1c46:	c6 1a       	sub	r12, r22
    1c48:	d7 0a       	sbc	r13, r23
    1c4a:	e8 0a       	sbc	r14, r24
    1c4c:	f9 0a       	sbc	r15, r25
    1c4e:	8c 0c       	add	r8, r12
    1c50:	9d 1c       	adc	r9, r13
    1c52:	ae 1c       	adc	r10, r14
    1c54:	bf 1c       	adc	r11, r15
		}
		// Check if game is over
		if (is_game_over()) {
    1c56:	0e 94 9e 06 	call	0xd3c	; 0xd3c <is_game_over>
    1c5a:	88 23       	and	r24, r24
    1c5c:	79 f0       	breq	.+30     	; 0x1c7c <play_game+0xa44>
			winner = (!get_player_2_turn()) + 1;
    1c5e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_player_2_turn>
    1c62:	89 2b       	or	r24, r25
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <play_game+0xa34>
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <play_game+0xa38>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <winner+0x1>
    1c74:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <winner>
			handle_game_over();
    1c78:	0e 94 b4 08 	call	0x1168	; 0x1168 <handle_game_over>
	last_time = get_current_time();
	last_second = get_current_time();
	last_ms = get_current_time();
	
	// We play the game until it's over
	while(!is_game_over()) {
    1c7c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <is_game_over>
    1c80:	88 23       	and	r24, r24
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <play_game+0xa4e>
    1c84:	3c cb       	rjmp	.-2440   	; 0x12fe <play_game+0xc6>
			winner = (!get_player_2_turn()) + 1;
			handle_game_over();
		}
	}	
	// We get here if the game is over.
}
    1c86:	ac 96       	adiw	r28, 0x2c	; 44
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	7f 90       	pop	r7
    1cac:	6f 90       	pop	r6
    1cae:	5f 90       	pop	r5
    1cb0:	4f 90       	pop	r4
    1cb2:	3f 90       	pop	r3
    1cb4:	2f 90       	pop	r2
    1cb6:	08 95       	ret

00001cb8 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1cb8:	0e 94 b2 07 	call	0xf64	; 0xf64 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1cbc:	0e 94 c1 07 	call	0xf82	; 0xf82 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
    1cc0:	0e 94 a7 08 	call	0x114e	; 0x114e <new_game>
		play_game();
    1cc4:	0e 94 1c 09 	call	0x1238	; 0x1238 <play_game>
		handle_game_over();
    1cc8:	0e 94 b4 08 	call	0x1168	; 0x1168 <handle_game_over>
    1ccc:	f9 cf       	rjmp	.-14     	; 0x1cc0 <main+0x8>

00001cce <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1cce:	cf 93       	push	r28
    1cd0:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1cd2:	8a 30       	cpi	r24, 0x0A	; 10
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1cd6:	8d e0       	ldi	r24, 0x0D	; 13
    1cd8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1cdc:	9f b7       	in	r25, 0x3f	; 63
    1cde:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1ce2:	99 23       	and	r25, r25
    1ce4:	29 f1       	breq	.+74     	; 0x1d30 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1ce6:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1cea:	8f 3f       	cpi	r24, 0xFF	; 255
    1cec:	d1 f3       	breq	.-12     	; 0x1ce2 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1cee:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1cf0:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <out_insert_pos>
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	8e 0f       	add	r24, r30
    1cf8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <out_insert_pos>
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	e2 56       	subi	r30, 0x62	; 98
    1d00:	fc 4f       	sbci	r31, 0xFC	; 252
    1d02:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1d04:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1d0e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <out_insert_pos>
    1d12:	8f 3f       	cpi	r24, 0xFF	; 255
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1d16:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1d1a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	80 62       	ori	r24, 0x20	; 32
    1d22:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1d24:	99 23       	and	r25, r25
    1d26:	39 f0       	breq	.+14     	; 0x1d36 <uart_put_char+0x68>
		sei();
    1d28:	78 94       	sei
	}
	return 0;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
}
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1d3e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1d42:	88 23       	and	r24, r24
    1d44:	e1 f3       	breq	.-8      	; 0x1d3e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1d46:	2f b7       	in	r18, 0x3f	; 63
    1d48:	20 78       	andi	r18, 0x80	; 128
	cli();
    1d4a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1d4c:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <input_insert_pos>
    1d50:	30 91 af 04 	lds	r19, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	83 1b       	sub	r24, r19
    1d58:	91 09       	sbc	r25, r1
    1d5a:	5a f4       	brpl	.+22     	; 0x1d72 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1d5c:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <input_insert_pos>
    1d60:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	e8 1b       	sub	r30, r24
    1d68:	f1 09       	sbc	r31, r1
    1d6a:	e2 55       	subi	r30, 0x52	; 82
    1d6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d6e:	80 81       	ld	r24, Z
    1d70:	0a c0       	rjmp	.+20     	; 0x1d86 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1d72:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <input_insert_pos>
    1d76:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	e8 1b       	sub	r30, r24
    1d7e:	f1 09       	sbc	r31, r1
    1d80:	e2 56       	subi	r30, 0x62	; 98
    1d82:	fb 4f       	sbci	r31, 0xFB	; 251
    1d84:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1d86:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1d8a:	91 50       	subi	r25, 0x01	; 1
    1d8c:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1d90:	22 23       	and	r18, r18
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <uart_get_char+0x58>
		sei();
    1d94:	78 94       	sei
	}	
	return c;
}
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	08 95       	ret

00001d9a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1d9a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <out_insert_pos>
	bytes_in_out_buffer = 0;
    1d9e:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <bytes_in_out_buffer>
	input_insert_pos = 0;
    1da2:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <input_insert_pos>
	bytes_in_input_buffer = 0;
    1da6:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <bytes_in_input_buffer>
	input_overrun = 0;
    1daa:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1dae:	40 93 fc 02 	sts	0x02FC, r20	; 0x8002fc <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	aa 1f       	adc	r26, r26
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	aa 1f       	adc	r26, r26
    1dc4:	bb 1f       	adc	r27, r27
    1dc6:	9c 01       	movw	r18, r24
    1dc8:	ad 01       	movw	r20, r26
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	44 1f       	adc	r20, r20
    1dd0:	55 1f       	adc	r21, r21
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	72 e1       	ldi	r23, 0x12	; 18
    1dd6:	8a e7       	ldi	r24, 0x7A	; 122
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 57 10 	call	0x20ae	; 0x20ae <__divmodsi4>
    1dde:	ba 01       	movw	r22, r20
    1de0:	a9 01       	movw	r20, r18
    1de2:	4f 5f       	subi	r20, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255
    1de6:	6f 4f       	sbci	r22, 0xFF	; 255
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	db 01       	movw	r26, r22
    1dec:	ca 01       	movw	r24, r20
    1dee:	1a f4       	brpl	.+6      	; 0x1df6 <init_serial_stdio+0x5c>
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	a1 1d       	adc	r26, r1
    1df4:	b1 1d       	adc	r27, r1
    1df6:	b5 95       	asr	r27
    1df8:	a7 95       	ror	r26
    1dfa:	97 95       	ror	r25
    1dfc:	87 95       	ror	r24
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1e00:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1e04:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1e08:	e1 ec       	ldi	r30, 0xC1	; 193
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	88 e1       	ldi	r24, 0x18	; 24
    1e0e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1e10:	80 81       	ld	r24, Z
    1e12:	80 68       	ori	r24, 0x80	; 128
    1e14:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1e16:	e0 eb       	ldi	r30, 0xB0	; 176
    1e18:	f4 e0       	ldi	r31, 0x04	; 4
    1e1a:	89 e0       	ldi	r24, 0x09	; 9
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	93 83       	std	Z+3, r25	; 0x03
    1e20:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	08 95       	ret

00001e28 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1e28:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	91 11       	cpse	r25, r1
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <serial_input_available+0xc>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
}
    1e34:	08 95       	ret

00001e36 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1e36:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <input_insert_pos>
	bytes_in_input_buffer = 0;
    1e3a:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <bytes_in_input_buffer>
    1e3e:	08 95       	ret

00001e40 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	2f 93       	push	r18
    1e4c:	8f 93       	push	r24
    1e4e:	9f 93       	push	r25
    1e50:	ef 93       	push	r30
    1e52:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1e54:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1e58:	88 23       	and	r24, r24
    1e5a:	29 f1       	breq	.+74     	; 0x1ea6 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1e5c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <out_insert_pos>
    1e60:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	82 1b       	sub	r24, r18
    1e68:	91 09       	sbc	r25, r1
    1e6a:	5a f4       	brpl	.+22     	; 0x1e82 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1e6c:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <out_insert_pos>
    1e70:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	e8 1b       	sub	r30, r24
    1e78:	f1 09       	sbc	r31, r1
    1e7a:	e3 56       	subi	r30, 0x63	; 99
    1e7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e7e:	90 81       	ld	r25, Z
    1e80:	0a c0       	rjmp	.+20     	; 0x1e96 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1e82:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <out_insert_pos>
    1e86:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	e8 1b       	sub	r30, r24
    1e8e:	f1 09       	sbc	r31, r1
    1e90:	e2 56       	subi	r30, 0x62	; 98
    1e92:	fc 4f       	sbci	r31, 0xFC	; 252
    1e94:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1e96:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1e9a:	81 50       	subi	r24, 0x01	; 1
    1e9c:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1ea0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1ea6:	e1 ec       	ldi	r30, 0xC1	; 193
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8f 7d       	andi	r24, 0xDF	; 223
    1eae:	80 83       	st	Z, r24
	}
}
    1eb0:	ff 91       	pop	r31
    1eb2:	ef 91       	pop	r30
    1eb4:	9f 91       	pop	r25
    1eb6:	8f 91       	pop	r24
    1eb8:	2f 91       	pop	r18
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	0f 90       	pop	r0
    1ec0:	1f 90       	pop	r1
    1ec2:	18 95       	reti

00001ec4 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	2f 93       	push	r18
    1ed0:	3f 93       	push	r19
    1ed2:	4f 93       	push	r20
    1ed4:	5f 93       	push	r21
    1ed6:	6f 93       	push	r22
    1ed8:	7f 93       	push	r23
    1eda:	8f 93       	push	r24
    1edc:	9f 93       	push	r25
    1ede:	af 93       	push	r26
    1ee0:	bf 93       	push	r27
    1ee2:	cf 93       	push	r28
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1ee8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1eec:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <do_echo>
    1ef0:	88 23       	and	r24, r24
    1ef2:	49 f0       	breq	.+18     	; 0x1f06 <__vector_20+0x42>
    1ef4:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <bytes_in_out_buffer>
    1ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	8c 2f       	mov	r24, r28
    1f02:	0e 94 67 0e 	call	0x1cce	; 0x1cce <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1f06:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1f0a:	80 31       	cpi	r24, 0x10	; 16
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <__vector_20+0x52>
		input_overrun = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <input_overrun>
    1f14:	18 c0       	rjmp	.+48     	; 0x1f46 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1f16:	cd 30       	cpi	r28, 0x0D	; 13
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <__vector_20+0x58>
			c = '\n';
    1f1a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1f1c:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <input_insert_pos>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	8e 0f       	add	r24, r30
    1f24:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <input_insert_pos>
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	e2 56       	subi	r30, 0x62	; 98
    1f2c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f2e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1f30:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <bytes_in_input_buffer>
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1f3a:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <input_insert_pos>
    1f3e:	80 31       	cpi	r24, 0x10	; 16
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1f42:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <input_insert_pos>
		}
	}
}
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	cf 91       	pop	r28
    1f4c:	bf 91       	pop	r27
    1f4e:	af 91       	pop	r26
    1f50:	9f 91       	pop	r25
    1f52:	8f 91       	pop	r24
    1f54:	7f 91       	pop	r23
    1f56:	6f 91       	pop	r22
    1f58:	5f 91       	pop	r21
    1f5a:	4f 91       	pop	r20
    1f5c:	3f 91       	pop	r19
    1f5e:	2f 91       	pop	r18
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1f6a:	94 b1       	in	r25, 0x04	; 4
    1f6c:	90 6b       	ori	r25, 0xB0	; 176
    1f6e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    1f70:	95 b1       	in	r25, 0x05	; 5
    1f72:	90 61       	ori	r25, 0x10	; 16
    1f74:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1f76:	90 e5       	ldi	r25, 0x50	; 80
    1f78:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1f7a:	88 30       	cpi	r24, 0x08	; 8
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <spi_setup_master+0x1c>
    1f7e:	80 32       	cpi	r24, 0x20	; 32
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <spi_setup_master+0x1c>
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	19 f4       	brne	.+6      	; 0x1f8c <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	9d bd       	out	0x2d, r25	; 45
			break;
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1f8c:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1f8e:	80 32       	cpi	r24, 0x20	; 32
    1f90:	69 f0       	breq	.+26     	; 0x1fac <spi_setup_master+0x42>
    1f92:	28 f4       	brcc	.+10     	; 0x1f9e <spi_setup_master+0x34>
    1f94:	88 30       	cpi	r24, 0x08	; 8
    1f96:	71 f0       	breq	.+28     	; 0x1fb4 <spi_setup_master+0x4a>
    1f98:	80 31       	cpi	r24, 0x10	; 16
    1f9a:	61 f0       	breq	.+24     	; 0x1fb4 <spi_setup_master+0x4a>
    1f9c:	0e c0       	rjmp	.+28     	; 0x1fba <spi_setup_master+0x50>
    1f9e:	80 34       	cpi	r24, 0x40	; 64
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <spi_setup_master+0x42>
    1fa2:	80 38       	cpi	r24, 0x80	; 128
    1fa4:	51 f4       	brne	.+20     	; 0x1fba <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
    1fa6:	8c b5       	in	r24, 0x2c	; 44
    1fa8:	81 60       	ori	r24, 0x01	; 1
    1faa:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1<<SPR10);
    1fac:	8c b5       	in	r24, 0x2c	; 44
    1fae:	82 60       	ori	r24, 0x02	; 2
    1fb0:	8c bd       	out	0x2c, r24	; 44
			break;
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1<<SPR00);
    1fb4:	8c b5       	in	r24, 0x2c	; 44
    1fb6:	81 60       	ori	r24, 0x01	; 1
    1fb8:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    1fba:	85 b1       	in	r24, 0x05	; 5
    1fbc:	8f 7e       	andi	r24, 0xEF	; 239
    1fbe:	85 b9       	out	0x05, r24	; 5
    1fc0:	08 95       	ret

00001fc2 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1fc2:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1 << SPIF0)) == 0) {
    1fc4:	0d b4       	in	r0, 0x2d	; 45
    1fc6:	07 fe       	sbrs	r0, 7
    1fc8:	fd cf       	rjmp	.-6      	; 0x1fc4 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1fca:	8e b5       	in	r24, 0x2e	; 46
    1fcc:	08 95       	ret

00001fce <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	7f 93       	push	r23
    1fd4:	6f 93       	push	r22
    1fd6:	8c e1       	ldi	r24, 0x1C	; 28
    1fd8:	92 e0       	ldi	r25, 0x02	; 2
    1fda:	9f 93       	push	r25
    1fdc:	8f 93       	push	r24
    1fde:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	08 95       	ret

00001ff0 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1ff0:	87 e1       	ldi	r24, 0x17	; 23
    1ff2:	92 e0       	ldi	r25, 0x02	; 2
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	08 95       	ret

00002002 <clear_to_end_of_line>:

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
    2002:	83 e1       	ldi	r24, 0x13	; 19
    2004:	92 e0       	ldi	r25, 0x02	; 2
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <printf_P>
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	08 95       	ret

00002014 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    2014:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <clockTicks>
    2018:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <clockTicks+0x1>
    201c:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <clockTicks+0x2>
    2020:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2024:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2026:	8c e7       	ldi	r24, 0x7C	; 124
    2028:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    2032:	ee e6       	ldi	r30, 0x6E	; 110
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	82 60       	ori	r24, 0x02	; 2
    203a:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    203c:	85 b3       	in	r24, 0x15	; 21
    203e:	82 70       	andi	r24, 0x02	; 2
    2040:	85 bb       	out	0x15, r24	; 21
    2042:	08 95       	ret

00002044 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    2044:	8f b7       	in	r24, 0x3f	; 63
    2046:	28 2f       	mov	r18, r24
    2048:	20 78       	andi	r18, 0x80	; 128
	cli();
    204a:	f8 94       	cli
	returnValue = clockTicks;
    204c:	60 91 fd 02 	lds	r22, 0x02FD	; 0x8002fd <clockTicks>
    2050:	70 91 fe 02 	lds	r23, 0x02FE	; 0x8002fe <clockTicks+0x1>
    2054:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <clockTicks+0x2>
    2058:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <clockTicks+0x3>
	if(interruptsOn) {
    205c:	22 23       	and	r18, r18
    205e:	09 f0       	breq	.+2      	; 0x2062 <get_current_time+0x1e>
		sei();
    2060:	78 94       	sei
	}
	return returnValue;
}
    2062:	08 95       	ret

00002064 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    2064:	1f 92       	push	r1
    2066:	0f 92       	push	r0
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	0f 92       	push	r0
    206c:	11 24       	eor	r1, r1
    206e:	8f 93       	push	r24
    2070:	9f 93       	push	r25
    2072:	af 93       	push	r26
    2074:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    2076:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <clockTicks>
    207a:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <clockTicks+0x1>
    207e:	a0 91 ff 02 	lds	r26, 0x02FF	; 0x8002ff <clockTicks+0x2>
    2082:	b0 91 00 03 	lds	r27, 0x0300	; 0x800300 <clockTicks+0x3>
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	a1 1d       	adc	r26, r1
    208a:	b1 1d       	adc	r27, r1
    208c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <clockTicks>
    2090:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <clockTicks+0x1>
    2094:	a0 93 ff 02 	sts	0x02FF, r26	; 0x8002ff <clockTicks+0x2>
    2098:	b0 93 00 03 	sts	0x0300, r27	; 0x800300 <clockTicks+0x3>
}
    209c:	bf 91       	pop	r27
    209e:	af 91       	pop	r26
    20a0:	9f 91       	pop	r25
    20a2:	8f 91       	pop	r24
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <__divmodsi4>:
    20ae:	05 2e       	mov	r0, r21
    20b0:	97 fb       	bst	r25, 7
    20b2:	1e f4       	brtc	.+6      	; 0x20ba <__divmodsi4+0xc>
    20b4:	00 94       	com	r0
    20b6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__negsi2>
    20ba:	57 fd       	sbrc	r21, 7
    20bc:	07 d0       	rcall	.+14     	; 0x20cc <__divmodsi4_neg2>
    20be:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodsi4>
    20c2:	07 fc       	sbrc	r0, 7
    20c4:	03 d0       	rcall	.+6      	; 0x20cc <__divmodsi4_neg2>
    20c6:	4e f4       	brtc	.+18     	; 0x20da <__divmodsi4_exit>
    20c8:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__negsi2>

000020cc <__divmodsi4_neg2>:
    20cc:	50 95       	com	r21
    20ce:	40 95       	com	r20
    20d0:	30 95       	com	r19
    20d2:	21 95       	neg	r18
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	4f 4f       	sbci	r20, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255

000020da <__divmodsi4_exit>:
    20da:	08 95       	ret

000020dc <__negsi2>:
    20dc:	90 95       	com	r25
    20de:	80 95       	com	r24
    20e0:	70 95       	com	r23
    20e2:	61 95       	neg	r22
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	08 95       	ret

000020ec <__udivmodsi4>:
    20ec:	a1 e2       	ldi	r26, 0x21	; 33
    20ee:	1a 2e       	mov	r1, r26
    20f0:	aa 1b       	sub	r26, r26
    20f2:	bb 1b       	sub	r27, r27
    20f4:	fd 01       	movw	r30, r26
    20f6:	0d c0       	rjmp	.+26     	; 0x2112 <__udivmodsi4_ep>

000020f8 <__udivmodsi4_loop>:
    20f8:	aa 1f       	adc	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	ee 1f       	adc	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	a2 17       	cp	r26, r18
    2102:	b3 07       	cpc	r27, r19
    2104:	e4 07       	cpc	r30, r20
    2106:	f5 07       	cpc	r31, r21
    2108:	20 f0       	brcs	.+8      	; 0x2112 <__udivmodsi4_ep>
    210a:	a2 1b       	sub	r26, r18
    210c:	b3 0b       	sbc	r27, r19
    210e:	e4 0b       	sbc	r30, r20
    2110:	f5 0b       	sbc	r31, r21

00002112 <__udivmodsi4_ep>:
    2112:	66 1f       	adc	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	88 1f       	adc	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	1a 94       	dec	r1
    211c:	69 f7       	brne	.-38     	; 0x20f8 <__udivmodsi4_loop>
    211e:	60 95       	com	r22
    2120:	70 95       	com	r23
    2122:	80 95       	com	r24
    2124:	90 95       	com	r25
    2126:	9b 01       	movw	r18, r22
    2128:	ac 01       	movw	r20, r24
    212a:	bd 01       	movw	r22, r26
    212c:	cf 01       	movw	r24, r30
    212e:	08 95       	ret

00002130 <fgetc>:
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
    2136:	2b 81       	ldd	r18, Y+3	; 0x03
    2138:	20 ff       	sbrs	r18, 0
    213a:	33 c0       	rjmp	.+102    	; 0x21a2 <fgetc+0x72>
    213c:	26 ff       	sbrs	r18, 6
    213e:	0a c0       	rjmp	.+20     	; 0x2154 <fgetc+0x24>
    2140:	2f 7b       	andi	r18, 0xBF	; 191
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	9f 81       	ldd	r25, Y+7	; 0x07
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	9f 83       	std	Y+7, r25	; 0x07
    214c:	8e 83       	std	Y+6, r24	; 0x06
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	29 c0       	rjmp	.+82     	; 0x21a6 <fgetc+0x76>
    2154:	22 ff       	sbrs	r18, 2
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <fgetc+0x46>
    2158:	e8 81       	ld	r30, Y
    215a:	f9 81       	ldd	r31, Y+1	; 0x01
    215c:	80 81       	ld	r24, Z
    215e:	08 2e       	mov	r0, r24
    2160:	00 0c       	add	r0, r0
    2162:	99 0b       	sbc	r25, r25
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	19 f4       	brne	.+6      	; 0x216e <fgetc+0x3e>
    2168:	20 62       	ori	r18, 0x20	; 32
    216a:	2b 83       	std	Y+3, r18	; 0x03
    216c:	1a c0       	rjmp	.+52     	; 0x21a2 <fgetc+0x72>
    216e:	31 96       	adiw	r30, 0x01	; 1
    2170:	f9 83       	std	Y+1, r31	; 0x01
    2172:	e8 83       	st	Y, r30
    2174:	0e c0       	rjmp	.+28     	; 0x2192 <fgetc+0x62>
    2176:	ea 85       	ldd	r30, Y+10	; 0x0a
    2178:	fb 85       	ldd	r31, Y+11	; 0x0b
    217a:	09 95       	icall
    217c:	97 ff       	sbrs	r25, 7
    217e:	09 c0       	rjmp	.+18     	; 0x2192 <fgetc+0x62>
    2180:	2b 81       	ldd	r18, Y+3	; 0x03
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	11 f0       	breq	.+4      	; 0x218a <fgetc+0x5a>
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	01 c0       	rjmp	.+2      	; 0x218c <fgetc+0x5c>
    218a:	80 e1       	ldi	r24, 0x10	; 16
    218c:	82 2b       	or	r24, r18
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	08 c0       	rjmp	.+16     	; 0x21a2 <fgetc+0x72>
    2192:	2e 81       	ldd	r18, Y+6	; 0x06
    2194:	3f 81       	ldd	r19, Y+7	; 0x07
    2196:	2f 5f       	subi	r18, 0xFF	; 255
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	3f 83       	std	Y+7, r19	; 0x07
    219c:	2e 83       	std	Y+6, r18	; 0x06
    219e:	99 27       	eor	r25, r25
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <fgetc+0x76>
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	9f ef       	ldi	r25, 0xFF	; 255
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	08 95       	ret

000021ac <printf>:
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	ec ed       	ldi	r30, 0xDC	; 220
    21b2:	f0 e1       	ldi	r31, 0x10	; 16
    21b4:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__+0x20>
    21b8:	ae 01       	movw	r20, r28
    21ba:	4b 5f       	subi	r20, 0xFB	; 251
    21bc:	5f 4f       	sbci	r21, 0xFF	; 255
    21be:	fa 01       	movw	r30, r20
    21c0:	61 91       	ld	r22, Z+
    21c2:	71 91       	ld	r23, Z+
    21c4:	af 01       	movw	r20, r30
    21c6:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <__iob+0x2>
    21ca:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <__iob+0x3>
    21ce:	0e 94 12 11 	call	0x2224	; 0x2224 <vfprintf>
    21d2:	e2 e0       	ldi	r30, 0x02	; 2
    21d4:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__+0x20>

000021d8 <printf_P>:
    21d8:	a0 e0       	ldi	r26, 0x00	; 0
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e2 ef       	ldi	r30, 0xF2	; 242
    21de:	f0 e1       	ldi	r31, 0x10	; 16
    21e0:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x1c>
    21e4:	ae 01       	movw	r20, r28
    21e6:	49 5f       	subi	r20, 0xF9	; 249
    21e8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ea:	da 01       	movw	r26, r20
    21ec:	6d 91       	ld	r22, X+
    21ee:	7d 91       	ld	r23, X+
    21f0:	ad 01       	movw	r20, r26
    21f2:	00 eb       	ldi	r16, 0xB0	; 176
    21f4:	14 e0       	ldi	r17, 0x04	; 4
    21f6:	f8 01       	movw	r30, r16
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	dc 01       	movw	r26, r24
    21fe:	13 96       	adiw	r26, 0x03	; 3
    2200:	2c 91       	ld	r18, X
    2202:	13 97       	sbiw	r26, 0x03	; 3
    2204:	28 60       	ori	r18, 0x08	; 8
    2206:	13 96       	adiw	r26, 0x03	; 3
    2208:	2c 93       	st	X, r18
    220a:	0e 94 12 11 	call	0x2224	; 0x2224 <vfprintf>
    220e:	d8 01       	movw	r26, r16
    2210:	12 96       	adiw	r26, 0x02	; 2
    2212:	ed 91       	ld	r30, X+
    2214:	fc 91       	ld	r31, X
    2216:	13 97       	sbiw	r26, 0x03	; 3
    2218:	23 81       	ldd	r18, Z+3	; 0x03
    221a:	27 7f       	andi	r18, 0xF7	; 247
    221c:	23 83       	std	Z+3, r18	; 0x03
    221e:	e4 e0       	ldi	r30, 0x04	; 4
    2220:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x1c>

00002224 <vfprintf>:
    2224:	ab e0       	ldi	r26, 0x0B	; 11
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e1       	ldi	r30, 0x18	; 24
    222a:	f1 e1       	ldi	r31, 0x11	; 17
    222c:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__prologue_saves__>
    2230:	6c 01       	movw	r12, r24
    2232:	7b 01       	movw	r14, r22
    2234:	8a 01       	movw	r16, r20
    2236:	fc 01       	movw	r30, r24
    2238:	17 82       	std	Z+7, r1	; 0x07
    223a:	16 82       	std	Z+6, r1	; 0x06
    223c:	83 81       	ldd	r24, Z+3	; 0x03
    223e:	81 ff       	sbrs	r24, 1
    2240:	cc c1       	rjmp	.+920    	; 0x25da <vfprintf+0x3b6>
    2242:	ce 01       	movw	r24, r28
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	3c 01       	movw	r6, r24
    2248:	f6 01       	movw	r30, r12
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	f7 01       	movw	r30, r14
    224e:	93 fd       	sbrc	r25, 3
    2250:	85 91       	lpm	r24, Z+
    2252:	93 ff       	sbrs	r25, 3
    2254:	81 91       	ld	r24, Z+
    2256:	7f 01       	movw	r14, r30
    2258:	88 23       	and	r24, r24
    225a:	09 f4       	brne	.+2      	; 0x225e <vfprintf+0x3a>
    225c:	ba c1       	rjmp	.+884    	; 0x25d2 <vfprintf+0x3ae>
    225e:	85 32       	cpi	r24, 0x25	; 37
    2260:	39 f4       	brne	.+14     	; 0x2270 <vfprintf+0x4c>
    2262:	93 fd       	sbrc	r25, 3
    2264:	85 91       	lpm	r24, Z+
    2266:	93 ff       	sbrs	r25, 3
    2268:	81 91       	ld	r24, Z+
    226a:	7f 01       	movw	r14, r30
    226c:	85 32       	cpi	r24, 0x25	; 37
    226e:	29 f4       	brne	.+10     	; 0x227a <vfprintf+0x56>
    2270:	b6 01       	movw	r22, r12
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    2278:	e7 cf       	rjmp	.-50     	; 0x2248 <vfprintf+0x24>
    227a:	91 2c       	mov	r9, r1
    227c:	21 2c       	mov	r2, r1
    227e:	31 2c       	mov	r3, r1
    2280:	ff e1       	ldi	r31, 0x1F	; 31
    2282:	f3 15       	cp	r31, r3
    2284:	d8 f0       	brcs	.+54     	; 0x22bc <vfprintf+0x98>
    2286:	8b 32       	cpi	r24, 0x2B	; 43
    2288:	79 f0       	breq	.+30     	; 0x22a8 <vfprintf+0x84>
    228a:	38 f4       	brcc	.+14     	; 0x229a <vfprintf+0x76>
    228c:	80 32       	cpi	r24, 0x20	; 32
    228e:	79 f0       	breq	.+30     	; 0x22ae <vfprintf+0x8a>
    2290:	83 32       	cpi	r24, 0x23	; 35
    2292:	a1 f4       	brne	.+40     	; 0x22bc <vfprintf+0x98>
    2294:	23 2d       	mov	r18, r3
    2296:	20 61       	ori	r18, 0x10	; 16
    2298:	1d c0       	rjmp	.+58     	; 0x22d4 <vfprintf+0xb0>
    229a:	8d 32       	cpi	r24, 0x2D	; 45
    229c:	61 f0       	breq	.+24     	; 0x22b6 <vfprintf+0x92>
    229e:	80 33       	cpi	r24, 0x30	; 48
    22a0:	69 f4       	brne	.+26     	; 0x22bc <vfprintf+0x98>
    22a2:	23 2d       	mov	r18, r3
    22a4:	21 60       	ori	r18, 0x01	; 1
    22a6:	16 c0       	rjmp	.+44     	; 0x22d4 <vfprintf+0xb0>
    22a8:	83 2d       	mov	r24, r3
    22aa:	82 60       	ori	r24, 0x02	; 2
    22ac:	38 2e       	mov	r3, r24
    22ae:	e3 2d       	mov	r30, r3
    22b0:	e4 60       	ori	r30, 0x04	; 4
    22b2:	3e 2e       	mov	r3, r30
    22b4:	2a c0       	rjmp	.+84     	; 0x230a <vfprintf+0xe6>
    22b6:	f3 2d       	mov	r31, r3
    22b8:	f8 60       	ori	r31, 0x08	; 8
    22ba:	1d c0       	rjmp	.+58     	; 0x22f6 <vfprintf+0xd2>
    22bc:	37 fc       	sbrc	r3, 7
    22be:	2d c0       	rjmp	.+90     	; 0x231a <vfprintf+0xf6>
    22c0:	20 ed       	ldi	r18, 0xD0	; 208
    22c2:	28 0f       	add	r18, r24
    22c4:	2a 30       	cpi	r18, 0x0A	; 10
    22c6:	40 f0       	brcs	.+16     	; 0x22d8 <vfprintf+0xb4>
    22c8:	8e 32       	cpi	r24, 0x2E	; 46
    22ca:	b9 f4       	brne	.+46     	; 0x22fa <vfprintf+0xd6>
    22cc:	36 fc       	sbrc	r3, 6
    22ce:	81 c1       	rjmp	.+770    	; 0x25d2 <vfprintf+0x3ae>
    22d0:	23 2d       	mov	r18, r3
    22d2:	20 64       	ori	r18, 0x40	; 64
    22d4:	32 2e       	mov	r3, r18
    22d6:	19 c0       	rjmp	.+50     	; 0x230a <vfprintf+0xe6>
    22d8:	36 fe       	sbrs	r3, 6
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <vfprintf+0xc4>
    22dc:	8a e0       	ldi	r24, 0x0A	; 10
    22de:	98 9e       	mul	r9, r24
    22e0:	20 0d       	add	r18, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	92 2e       	mov	r9, r18
    22e6:	11 c0       	rjmp	.+34     	; 0x230a <vfprintf+0xe6>
    22e8:	ea e0       	ldi	r30, 0x0A	; 10
    22ea:	2e 9e       	mul	r2, r30
    22ec:	20 0d       	add	r18, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	22 2e       	mov	r2, r18
    22f2:	f3 2d       	mov	r31, r3
    22f4:	f0 62       	ori	r31, 0x20	; 32
    22f6:	3f 2e       	mov	r3, r31
    22f8:	08 c0       	rjmp	.+16     	; 0x230a <vfprintf+0xe6>
    22fa:	8c 36       	cpi	r24, 0x6C	; 108
    22fc:	21 f4       	brne	.+8      	; 0x2306 <vfprintf+0xe2>
    22fe:	83 2d       	mov	r24, r3
    2300:	80 68       	ori	r24, 0x80	; 128
    2302:	38 2e       	mov	r3, r24
    2304:	02 c0       	rjmp	.+4      	; 0x230a <vfprintf+0xe6>
    2306:	88 36       	cpi	r24, 0x68	; 104
    2308:	41 f4       	brne	.+16     	; 0x231a <vfprintf+0xf6>
    230a:	f7 01       	movw	r30, r14
    230c:	93 fd       	sbrc	r25, 3
    230e:	85 91       	lpm	r24, Z+
    2310:	93 ff       	sbrs	r25, 3
    2312:	81 91       	ld	r24, Z+
    2314:	7f 01       	movw	r14, r30
    2316:	81 11       	cpse	r24, r1
    2318:	b3 cf       	rjmp	.-154    	; 0x2280 <vfprintf+0x5c>
    231a:	98 2f       	mov	r25, r24
    231c:	9f 7d       	andi	r25, 0xDF	; 223
    231e:	95 54       	subi	r25, 0x45	; 69
    2320:	93 30       	cpi	r25, 0x03	; 3
    2322:	28 f4       	brcc	.+10     	; 0x232e <vfprintf+0x10a>
    2324:	0c 5f       	subi	r16, 0xFC	; 252
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	9f e3       	ldi	r25, 0x3F	; 63
    232a:	99 83       	std	Y+1, r25	; 0x01
    232c:	0d c0       	rjmp	.+26     	; 0x2348 <vfprintf+0x124>
    232e:	83 36       	cpi	r24, 0x63	; 99
    2330:	31 f0       	breq	.+12     	; 0x233e <vfprintf+0x11a>
    2332:	83 37       	cpi	r24, 0x73	; 115
    2334:	71 f0       	breq	.+28     	; 0x2352 <vfprintf+0x12e>
    2336:	83 35       	cpi	r24, 0x53	; 83
    2338:	09 f0       	breq	.+2      	; 0x233c <vfprintf+0x118>
    233a:	59 c0       	rjmp	.+178    	; 0x23ee <vfprintf+0x1ca>
    233c:	21 c0       	rjmp	.+66     	; 0x2380 <vfprintf+0x15c>
    233e:	f8 01       	movw	r30, r16
    2340:	80 81       	ld	r24, Z
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	0e 5f       	subi	r16, 0xFE	; 254
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	88 24       	eor	r8, r8
    234a:	83 94       	inc	r8
    234c:	91 2c       	mov	r9, r1
    234e:	53 01       	movw	r10, r6
    2350:	13 c0       	rjmp	.+38     	; 0x2378 <vfprintf+0x154>
    2352:	28 01       	movw	r4, r16
    2354:	f2 e0       	ldi	r31, 0x02	; 2
    2356:	4f 0e       	add	r4, r31
    2358:	51 1c       	adc	r5, r1
    235a:	f8 01       	movw	r30, r16
    235c:	a0 80       	ld	r10, Z
    235e:	b1 80       	ldd	r11, Z+1	; 0x01
    2360:	36 fe       	sbrs	r3, 6
    2362:	03 c0       	rjmp	.+6      	; 0x236a <vfprintf+0x146>
    2364:	69 2d       	mov	r22, r9
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0x14a>
    236a:	6f ef       	ldi	r22, 0xFF	; 255
    236c:	7f ef       	ldi	r23, 0xFF	; 255
    236e:	c5 01       	movw	r24, r10
    2370:	0e 94 fe 12 	call	0x25fc	; 0x25fc <strnlen>
    2374:	4c 01       	movw	r8, r24
    2376:	82 01       	movw	r16, r4
    2378:	f3 2d       	mov	r31, r3
    237a:	ff 77       	andi	r31, 0x7F	; 127
    237c:	3f 2e       	mov	r3, r31
    237e:	16 c0       	rjmp	.+44     	; 0x23ac <vfprintf+0x188>
    2380:	28 01       	movw	r4, r16
    2382:	22 e0       	ldi	r18, 0x02	; 2
    2384:	42 0e       	add	r4, r18
    2386:	51 1c       	adc	r5, r1
    2388:	f8 01       	movw	r30, r16
    238a:	a0 80       	ld	r10, Z
    238c:	b1 80       	ldd	r11, Z+1	; 0x01
    238e:	36 fe       	sbrs	r3, 6
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <vfprintf+0x174>
    2392:	69 2d       	mov	r22, r9
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	02 c0       	rjmp	.+4      	; 0x239c <vfprintf+0x178>
    2398:	6f ef       	ldi	r22, 0xFF	; 255
    239a:	7f ef       	ldi	r23, 0xFF	; 255
    239c:	c5 01       	movw	r24, r10
    239e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <strnlen_P>
    23a2:	4c 01       	movw	r8, r24
    23a4:	f3 2d       	mov	r31, r3
    23a6:	f0 68       	ori	r31, 0x80	; 128
    23a8:	3f 2e       	mov	r3, r31
    23aa:	82 01       	movw	r16, r4
    23ac:	33 fc       	sbrc	r3, 3
    23ae:	1b c0       	rjmp	.+54     	; 0x23e6 <vfprintf+0x1c2>
    23b0:	82 2d       	mov	r24, r2
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	88 16       	cp	r8, r24
    23b6:	99 06       	cpc	r9, r25
    23b8:	b0 f4       	brcc	.+44     	; 0x23e6 <vfprintf+0x1c2>
    23ba:	b6 01       	movw	r22, r12
    23bc:	80 e2       	ldi	r24, 0x20	; 32
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    23c4:	2a 94       	dec	r2
    23c6:	f4 cf       	rjmp	.-24     	; 0x23b0 <vfprintf+0x18c>
    23c8:	f5 01       	movw	r30, r10
    23ca:	37 fc       	sbrc	r3, 7
    23cc:	85 91       	lpm	r24, Z+
    23ce:	37 fe       	sbrs	r3, 7
    23d0:	81 91       	ld	r24, Z+
    23d2:	5f 01       	movw	r10, r30
    23d4:	b6 01       	movw	r22, r12
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    23dc:	21 10       	cpse	r2, r1
    23de:	2a 94       	dec	r2
    23e0:	21 e0       	ldi	r18, 0x01	; 1
    23e2:	82 1a       	sub	r8, r18
    23e4:	91 08       	sbc	r9, r1
    23e6:	81 14       	cp	r8, r1
    23e8:	91 04       	cpc	r9, r1
    23ea:	71 f7       	brne	.-36     	; 0x23c8 <vfprintf+0x1a4>
    23ec:	e8 c0       	rjmp	.+464    	; 0x25be <vfprintf+0x39a>
    23ee:	84 36       	cpi	r24, 0x64	; 100
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <vfprintf+0x1d2>
    23f2:	89 36       	cpi	r24, 0x69	; 105
    23f4:	41 f5       	brne	.+80     	; 0x2446 <vfprintf+0x222>
    23f6:	f8 01       	movw	r30, r16
    23f8:	37 fe       	sbrs	r3, 7
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <vfprintf+0x1e6>
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	0c 5f       	subi	r16, 0xFC	; 252
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	08 c0       	rjmp	.+16     	; 0x241a <vfprintf+0x1f6>
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	07 2e       	mov	r0, r23
    2410:	00 0c       	add	r0, r0
    2412:	88 0b       	sbc	r24, r24
    2414:	99 0b       	sbc	r25, r25
    2416:	0e 5f       	subi	r16, 0xFE	; 254
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	f3 2d       	mov	r31, r3
    241c:	ff 76       	andi	r31, 0x6F	; 111
    241e:	3f 2e       	mov	r3, r31
    2420:	97 ff       	sbrs	r25, 7
    2422:	09 c0       	rjmp	.+18     	; 0x2436 <vfprintf+0x212>
    2424:	90 95       	com	r25
    2426:	80 95       	com	r24
    2428:	70 95       	com	r23
    242a:	61 95       	neg	r22
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
    242e:	8f 4f       	sbci	r24, 0xFF	; 255
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	f0 68       	ori	r31, 0x80	; 128
    2434:	3f 2e       	mov	r3, r31
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	a3 01       	movw	r20, r6
    243c:	0e 94 45 13 	call	0x268a	; 0x268a <__ultoa_invert>
    2440:	88 2e       	mov	r8, r24
    2442:	86 18       	sub	r8, r6
    2444:	45 c0       	rjmp	.+138    	; 0x24d0 <vfprintf+0x2ac>
    2446:	85 37       	cpi	r24, 0x75	; 117
    2448:	31 f4       	brne	.+12     	; 0x2456 <vfprintf+0x232>
    244a:	23 2d       	mov	r18, r3
    244c:	2f 7e       	andi	r18, 0xEF	; 239
    244e:	b2 2e       	mov	r11, r18
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	25 c0       	rjmp	.+74     	; 0x24a0 <vfprintf+0x27c>
    2456:	93 2d       	mov	r25, r3
    2458:	99 7f       	andi	r25, 0xF9	; 249
    245a:	b9 2e       	mov	r11, r25
    245c:	8f 36       	cpi	r24, 0x6F	; 111
    245e:	c1 f0       	breq	.+48     	; 0x2490 <vfprintf+0x26c>
    2460:	18 f4       	brcc	.+6      	; 0x2468 <vfprintf+0x244>
    2462:	88 35       	cpi	r24, 0x58	; 88
    2464:	79 f0       	breq	.+30     	; 0x2484 <vfprintf+0x260>
    2466:	b5 c0       	rjmp	.+362    	; 0x25d2 <vfprintf+0x3ae>
    2468:	80 37       	cpi	r24, 0x70	; 112
    246a:	19 f0       	breq	.+6      	; 0x2472 <vfprintf+0x24e>
    246c:	88 37       	cpi	r24, 0x78	; 120
    246e:	21 f0       	breq	.+8      	; 0x2478 <vfprintf+0x254>
    2470:	b0 c0       	rjmp	.+352    	; 0x25d2 <vfprintf+0x3ae>
    2472:	e9 2f       	mov	r30, r25
    2474:	e0 61       	ori	r30, 0x10	; 16
    2476:	be 2e       	mov	r11, r30
    2478:	b4 fe       	sbrs	r11, 4
    247a:	0d c0       	rjmp	.+26     	; 0x2496 <vfprintf+0x272>
    247c:	fb 2d       	mov	r31, r11
    247e:	f4 60       	ori	r31, 0x04	; 4
    2480:	bf 2e       	mov	r11, r31
    2482:	09 c0       	rjmp	.+18     	; 0x2496 <vfprintf+0x272>
    2484:	34 fe       	sbrs	r3, 4
    2486:	0a c0       	rjmp	.+20     	; 0x249c <vfprintf+0x278>
    2488:	29 2f       	mov	r18, r25
    248a:	26 60       	ori	r18, 0x06	; 6
    248c:	b2 2e       	mov	r11, r18
    248e:	06 c0       	rjmp	.+12     	; 0x249c <vfprintf+0x278>
    2490:	28 e0       	ldi	r18, 0x08	; 8
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	05 c0       	rjmp	.+10     	; 0x24a0 <vfprintf+0x27c>
    2496:	20 e1       	ldi	r18, 0x10	; 16
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <vfprintf+0x27c>
    249c:	20 e1       	ldi	r18, 0x10	; 16
    249e:	32 e0       	ldi	r19, 0x02	; 2
    24a0:	f8 01       	movw	r30, r16
    24a2:	b7 fe       	sbrs	r11, 7
    24a4:	07 c0       	rjmp	.+14     	; 0x24b4 <vfprintf+0x290>
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	0c 5f       	subi	r16, 0xFC	; 252
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	06 c0       	rjmp	.+12     	; 0x24c0 <vfprintf+0x29c>
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 5f       	subi	r16, 0xFE	; 254
    24be:	1f 4f       	sbci	r17, 0xFF	; 255
    24c0:	a3 01       	movw	r20, r6
    24c2:	0e 94 45 13 	call	0x268a	; 0x268a <__ultoa_invert>
    24c6:	88 2e       	mov	r8, r24
    24c8:	86 18       	sub	r8, r6
    24ca:	fb 2d       	mov	r31, r11
    24cc:	ff 77       	andi	r31, 0x7F	; 127
    24ce:	3f 2e       	mov	r3, r31
    24d0:	36 fe       	sbrs	r3, 6
    24d2:	0d c0       	rjmp	.+26     	; 0x24ee <vfprintf+0x2ca>
    24d4:	23 2d       	mov	r18, r3
    24d6:	2e 7f       	andi	r18, 0xFE	; 254
    24d8:	a2 2e       	mov	r10, r18
    24da:	89 14       	cp	r8, r9
    24dc:	58 f4       	brcc	.+22     	; 0x24f4 <vfprintf+0x2d0>
    24de:	34 fe       	sbrs	r3, 4
    24e0:	0b c0       	rjmp	.+22     	; 0x24f8 <vfprintf+0x2d4>
    24e2:	32 fc       	sbrc	r3, 2
    24e4:	09 c0       	rjmp	.+18     	; 0x24f8 <vfprintf+0x2d4>
    24e6:	83 2d       	mov	r24, r3
    24e8:	8e 7e       	andi	r24, 0xEE	; 238
    24ea:	a8 2e       	mov	r10, r24
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <vfprintf+0x2d4>
    24ee:	b8 2c       	mov	r11, r8
    24f0:	a3 2c       	mov	r10, r3
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <vfprintf+0x2d6>
    24f4:	b8 2c       	mov	r11, r8
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <vfprintf+0x2d6>
    24f8:	b9 2c       	mov	r11, r9
    24fa:	a4 fe       	sbrs	r10, 4
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <vfprintf+0x2f8>
    24fe:	fe 01       	movw	r30, r28
    2500:	e8 0d       	add	r30, r8
    2502:	f1 1d       	adc	r31, r1
    2504:	80 81       	ld	r24, Z
    2506:	80 33       	cpi	r24, 0x30	; 48
    2508:	21 f4       	brne	.+8      	; 0x2512 <vfprintf+0x2ee>
    250a:	9a 2d       	mov	r25, r10
    250c:	99 7e       	andi	r25, 0xE9	; 233
    250e:	a9 2e       	mov	r10, r25
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <vfprintf+0x300>
    2512:	a2 fe       	sbrs	r10, 2
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <vfprintf+0x2fe>
    2516:	b3 94       	inc	r11
    2518:	b3 94       	inc	r11
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <vfprintf+0x300>
    251c:	8a 2d       	mov	r24, r10
    251e:	86 78       	andi	r24, 0x86	; 134
    2520:	09 f0       	breq	.+2      	; 0x2524 <vfprintf+0x300>
    2522:	b3 94       	inc	r11
    2524:	a3 fc       	sbrc	r10, 3
    2526:	11 c0       	rjmp	.+34     	; 0x254a <vfprintf+0x326>
    2528:	a0 fe       	sbrs	r10, 0
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <vfprintf+0x314>
    252c:	b2 14       	cp	r11, r2
    252e:	88 f4       	brcc	.+34     	; 0x2552 <vfprintf+0x32e>
    2530:	28 0c       	add	r2, r8
    2532:	92 2c       	mov	r9, r2
    2534:	9b 18       	sub	r9, r11
    2536:	0e c0       	rjmp	.+28     	; 0x2554 <vfprintf+0x330>
    2538:	b2 14       	cp	r11, r2
    253a:	60 f4       	brcc	.+24     	; 0x2554 <vfprintf+0x330>
    253c:	b6 01       	movw	r22, r12
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    2546:	b3 94       	inc	r11
    2548:	f7 cf       	rjmp	.-18     	; 0x2538 <vfprintf+0x314>
    254a:	b2 14       	cp	r11, r2
    254c:	18 f4       	brcc	.+6      	; 0x2554 <vfprintf+0x330>
    254e:	2b 18       	sub	r2, r11
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <vfprintf+0x332>
    2552:	98 2c       	mov	r9, r8
    2554:	21 2c       	mov	r2, r1
    2556:	a4 fe       	sbrs	r10, 4
    2558:	10 c0       	rjmp	.+32     	; 0x257a <vfprintf+0x356>
    255a:	b6 01       	movw	r22, r12
    255c:	80 e3       	ldi	r24, 0x30	; 48
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    2564:	a2 fe       	sbrs	r10, 2
    2566:	17 c0       	rjmp	.+46     	; 0x2596 <vfprintf+0x372>
    2568:	a1 fc       	sbrc	r10, 1
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <vfprintf+0x34e>
    256c:	88 e7       	ldi	r24, 0x78	; 120
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <vfprintf+0x352>
    2572:	88 e5       	ldi	r24, 0x58	; 88
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	b6 01       	movw	r22, r12
    2578:	0c c0       	rjmp	.+24     	; 0x2592 <vfprintf+0x36e>
    257a:	8a 2d       	mov	r24, r10
    257c:	86 78       	andi	r24, 0x86	; 134
    257e:	59 f0       	breq	.+22     	; 0x2596 <vfprintf+0x372>
    2580:	a1 fe       	sbrs	r10, 1
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <vfprintf+0x364>
    2584:	8b e2       	ldi	r24, 0x2B	; 43
    2586:	01 c0       	rjmp	.+2      	; 0x258a <vfprintf+0x366>
    2588:	80 e2       	ldi	r24, 0x20	; 32
    258a:	a7 fc       	sbrc	r10, 7
    258c:	8d e2       	ldi	r24, 0x2D	; 45
    258e:	b6 01       	movw	r22, r12
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    2596:	89 14       	cp	r8, r9
    2598:	38 f4       	brcc	.+14     	; 0x25a8 <vfprintf+0x384>
    259a:	b6 01       	movw	r22, r12
    259c:	80 e3       	ldi	r24, 0x30	; 48
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    25a4:	9a 94       	dec	r9
    25a6:	f7 cf       	rjmp	.-18     	; 0x2596 <vfprintf+0x372>
    25a8:	8a 94       	dec	r8
    25aa:	f3 01       	movw	r30, r6
    25ac:	e8 0d       	add	r30, r8
    25ae:	f1 1d       	adc	r31, r1
    25b0:	80 81       	ld	r24, Z
    25b2:	b6 01       	movw	r22, r12
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    25ba:	81 10       	cpse	r8, r1
    25bc:	f5 cf       	rjmp	.-22     	; 0x25a8 <vfprintf+0x384>
    25be:	22 20       	and	r2, r2
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <vfprintf+0x3a0>
    25c2:	42 ce       	rjmp	.-892    	; 0x2248 <vfprintf+0x24>
    25c4:	b6 01       	movw	r22, r12
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 09 13 	call	0x2612	; 0x2612 <fputc>
    25ce:	2a 94       	dec	r2
    25d0:	f6 cf       	rjmp	.-20     	; 0x25be <vfprintf+0x39a>
    25d2:	f6 01       	movw	r30, r12
    25d4:	86 81       	ldd	r24, Z+6	; 0x06
    25d6:	97 81       	ldd	r25, Z+7	; 0x07
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <vfprintf+0x3ba>
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	2b 96       	adiw	r28, 0x0b	; 11
    25e0:	e2 e1       	ldi	r30, 0x12	; 18
    25e2:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__epilogue_restores__>

000025e6 <strnlen_P>:
    25e6:	fc 01       	movw	r30, r24
    25e8:	05 90       	lpm	r0, Z+
    25ea:	61 50       	subi	r22, 0x01	; 1
    25ec:	70 40       	sbci	r23, 0x00	; 0
    25ee:	01 10       	cpse	r0, r1
    25f0:	d8 f7       	brcc	.-10     	; 0x25e8 <strnlen_P+0x2>
    25f2:	80 95       	com	r24
    25f4:	90 95       	com	r25
    25f6:	8e 0f       	add	r24, r30
    25f8:	9f 1f       	adc	r25, r31
    25fa:	08 95       	ret

000025fc <strnlen>:
    25fc:	fc 01       	movw	r30, r24
    25fe:	61 50       	subi	r22, 0x01	; 1
    2600:	70 40       	sbci	r23, 0x00	; 0
    2602:	01 90       	ld	r0, Z+
    2604:	01 10       	cpse	r0, r1
    2606:	d8 f7       	brcc	.-10     	; 0x25fe <strnlen+0x2>
    2608:	80 95       	com	r24
    260a:	90 95       	com	r25
    260c:	8e 0f       	add	r24, r30
    260e:	9f 1f       	adc	r25, r31
    2610:	08 95       	ret

00002612 <fputc>:
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	fb 01       	movw	r30, r22
    261c:	23 81       	ldd	r18, Z+3	; 0x03
    261e:	21 fd       	sbrc	r18, 1
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <fputc+0x16>
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	9f ef       	ldi	r25, 0xFF	; 255
    2626:	2c c0       	rjmp	.+88     	; 0x2680 <fputc+0x6e>
    2628:	22 ff       	sbrs	r18, 2
    262a:	16 c0       	rjmp	.+44     	; 0x2658 <fputc+0x46>
    262c:	46 81       	ldd	r20, Z+6	; 0x06
    262e:	57 81       	ldd	r21, Z+7	; 0x07
    2630:	24 81       	ldd	r18, Z+4	; 0x04
    2632:	35 81       	ldd	r19, Z+5	; 0x05
    2634:	42 17       	cp	r20, r18
    2636:	53 07       	cpc	r21, r19
    2638:	44 f4       	brge	.+16     	; 0x264a <fputc+0x38>
    263a:	a0 81       	ld	r26, Z
    263c:	b1 81       	ldd	r27, Z+1	; 0x01
    263e:	9d 01       	movw	r18, r26
    2640:	2f 5f       	subi	r18, 0xFF	; 255
    2642:	3f 4f       	sbci	r19, 0xFF	; 255
    2644:	31 83       	std	Z+1, r19	; 0x01
    2646:	20 83       	st	Z, r18
    2648:	8c 93       	st	X, r24
    264a:	26 81       	ldd	r18, Z+6	; 0x06
    264c:	37 81       	ldd	r19, Z+7	; 0x07
    264e:	2f 5f       	subi	r18, 0xFF	; 255
    2650:	3f 4f       	sbci	r19, 0xFF	; 255
    2652:	37 83       	std	Z+7, r19	; 0x07
    2654:	26 83       	std	Z+6, r18	; 0x06
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <fputc+0x6e>
    2658:	8b 01       	movw	r16, r22
    265a:	ec 01       	movw	r28, r24
    265c:	fb 01       	movw	r30, r22
    265e:	00 84       	ldd	r0, Z+8	; 0x08
    2660:	f1 85       	ldd	r31, Z+9	; 0x09
    2662:	e0 2d       	mov	r30, r0
    2664:	09 95       	icall
    2666:	89 2b       	or	r24, r25
    2668:	e1 f6       	brne	.-72     	; 0x2622 <fputc+0x10>
    266a:	d8 01       	movw	r26, r16
    266c:	16 96       	adiw	r26, 0x06	; 6
    266e:	8d 91       	ld	r24, X+
    2670:	9c 91       	ld	r25, X
    2672:	17 97       	sbiw	r26, 0x07	; 7
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	17 96       	adiw	r26, 0x07	; 7
    2678:	9c 93       	st	X, r25
    267a:	8e 93       	st	-X, r24
    267c:	16 97       	sbiw	r26, 0x06	; 6
    267e:	ce 01       	movw	r24, r28
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	08 95       	ret

0000268a <__ultoa_invert>:
    268a:	fa 01       	movw	r30, r20
    268c:	aa 27       	eor	r26, r26
    268e:	28 30       	cpi	r18, 0x08	; 8
    2690:	51 f1       	breq	.+84     	; 0x26e6 <__ultoa_invert+0x5c>
    2692:	20 31       	cpi	r18, 0x10	; 16
    2694:	81 f1       	breq	.+96     	; 0x26f6 <__ultoa_invert+0x6c>
    2696:	e8 94       	clt
    2698:	6f 93       	push	r22
    269a:	6e 7f       	andi	r22, 0xFE	; 254
    269c:	6e 5f       	subi	r22, 0xFE	; 254
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	8f 4f       	sbci	r24, 0xFF	; 255
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	af 4f       	sbci	r26, 0xFF	; 255
    26a6:	b1 e0       	ldi	r27, 0x01	; 1
    26a8:	3e d0       	rcall	.+124    	; 0x2726 <__ultoa_invert+0x9c>
    26aa:	b4 e0       	ldi	r27, 0x04	; 4
    26ac:	3c d0       	rcall	.+120    	; 0x2726 <__ultoa_invert+0x9c>
    26ae:	67 0f       	add	r22, r23
    26b0:	78 1f       	adc	r23, r24
    26b2:	89 1f       	adc	r24, r25
    26b4:	9a 1f       	adc	r25, r26
    26b6:	a1 1d       	adc	r26, r1
    26b8:	68 0f       	add	r22, r24
    26ba:	79 1f       	adc	r23, r25
    26bc:	8a 1f       	adc	r24, r26
    26be:	91 1d       	adc	r25, r1
    26c0:	a1 1d       	adc	r26, r1
    26c2:	6a 0f       	add	r22, r26
    26c4:	71 1d       	adc	r23, r1
    26c6:	81 1d       	adc	r24, r1
    26c8:	91 1d       	adc	r25, r1
    26ca:	a1 1d       	adc	r26, r1
    26cc:	20 d0       	rcall	.+64     	; 0x270e <__ultoa_invert+0x84>
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <__ultoa_invert+0x48>
    26d0:	68 94       	set
    26d2:	3f 91       	pop	r19
    26d4:	2a e0       	ldi	r18, 0x0A	; 10
    26d6:	26 9f       	mul	r18, r22
    26d8:	11 24       	eor	r1, r1
    26da:	30 19       	sub	r19, r0
    26dc:	30 5d       	subi	r19, 0xD0	; 208
    26de:	31 93       	st	Z+, r19
    26e0:	de f6       	brtc	.-74     	; 0x2698 <__ultoa_invert+0xe>
    26e2:	cf 01       	movw	r24, r30
    26e4:	08 95       	ret
    26e6:	46 2f       	mov	r20, r22
    26e8:	47 70       	andi	r20, 0x07	; 7
    26ea:	40 5d       	subi	r20, 0xD0	; 208
    26ec:	41 93       	st	Z+, r20
    26ee:	b3 e0       	ldi	r27, 0x03	; 3
    26f0:	0f d0       	rcall	.+30     	; 0x2710 <__ultoa_invert+0x86>
    26f2:	c9 f7       	brne	.-14     	; 0x26e6 <__ultoa_invert+0x5c>
    26f4:	f6 cf       	rjmp	.-20     	; 0x26e2 <__ultoa_invert+0x58>
    26f6:	46 2f       	mov	r20, r22
    26f8:	4f 70       	andi	r20, 0x0F	; 15
    26fa:	40 5d       	subi	r20, 0xD0	; 208
    26fc:	4a 33       	cpi	r20, 0x3A	; 58
    26fe:	18 f0       	brcs	.+6      	; 0x2706 <__ultoa_invert+0x7c>
    2700:	49 5d       	subi	r20, 0xD9	; 217
    2702:	31 fd       	sbrc	r19, 1
    2704:	40 52       	subi	r20, 0x20	; 32
    2706:	41 93       	st	Z+, r20
    2708:	02 d0       	rcall	.+4      	; 0x270e <__ultoa_invert+0x84>
    270a:	a9 f7       	brne	.-22     	; 0x26f6 <__ultoa_invert+0x6c>
    270c:	ea cf       	rjmp	.-44     	; 0x26e2 <__ultoa_invert+0x58>
    270e:	b4 e0       	ldi	r27, 0x04	; 4
    2710:	a6 95       	lsr	r26
    2712:	97 95       	ror	r25
    2714:	87 95       	ror	r24
    2716:	77 95       	ror	r23
    2718:	67 95       	ror	r22
    271a:	ba 95       	dec	r27
    271c:	c9 f7       	brne	.-14     	; 0x2710 <__ultoa_invert+0x86>
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	61 05       	cpc	r22, r1
    2722:	71 05       	cpc	r23, r1
    2724:	08 95       	ret
    2726:	9b 01       	movw	r18, r22
    2728:	ac 01       	movw	r20, r24
    272a:	0a 2e       	mov	r0, r26
    272c:	06 94       	lsr	r0
    272e:	57 95       	ror	r21
    2730:	47 95       	ror	r20
    2732:	37 95       	ror	r19
    2734:	27 95       	ror	r18
    2736:	ba 95       	dec	r27
    2738:	c9 f7       	brne	.-14     	; 0x272c <__ultoa_invert+0xa2>
    273a:	62 0f       	add	r22, r18
    273c:	73 1f       	adc	r23, r19
    273e:	84 1f       	adc	r24, r20
    2740:	95 1f       	adc	r25, r21
    2742:	a0 1d       	adc	r26, r0
    2744:	08 95       	ret

00002746 <__prologue_saves__>:
    2746:	2f 92       	push	r2
    2748:	3f 92       	push	r3
    274a:	4f 92       	push	r4
    274c:	5f 92       	push	r5
    274e:	6f 92       	push	r6
    2750:	7f 92       	push	r7
    2752:	8f 92       	push	r8
    2754:	9f 92       	push	r9
    2756:	af 92       	push	r10
    2758:	bf 92       	push	r11
    275a:	cf 92       	push	r12
    275c:	df 92       	push	r13
    275e:	ef 92       	push	r14
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	ca 1b       	sub	r28, r26
    2770:	db 0b       	sbc	r29, r27
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	09 94       	ijmp

0000277e <__epilogue_restores__>:
    277e:	2a 88       	ldd	r2, Y+18	; 0x12
    2780:	39 88       	ldd	r3, Y+17	; 0x11
    2782:	48 88       	ldd	r4, Y+16	; 0x10
    2784:	5f 84       	ldd	r5, Y+15	; 0x0f
    2786:	6e 84       	ldd	r6, Y+14	; 0x0e
    2788:	7d 84       	ldd	r7, Y+13	; 0x0d
    278a:	8c 84       	ldd	r8, Y+12	; 0x0c
    278c:	9b 84       	ldd	r9, Y+11	; 0x0b
    278e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2790:	b9 84       	ldd	r11, Y+9	; 0x09
    2792:	c8 84       	ldd	r12, Y+8	; 0x08
    2794:	df 80       	ldd	r13, Y+7	; 0x07
    2796:	ee 80       	ldd	r14, Y+6	; 0x06
    2798:	fd 80       	ldd	r15, Y+5	; 0x05
    279a:	0c 81       	ldd	r16, Y+4	; 0x04
    279c:	1b 81       	ldd	r17, Y+3	; 0x03
    279e:	aa 81       	ldd	r26, Y+2	; 0x02
    27a0:	b9 81       	ldd	r27, Y+1	; 0x01
    27a2:	ce 0f       	add	r28, r30
    27a4:	d1 1d       	adc	r29, r1
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	ed 01       	movw	r28, r26
    27b2:	08 95       	ret

000027b4 <_exit>:
    27b4:	f8 94       	cli

000027b6 <__stop_program>:
    27b6:	ff cf       	rjmp	.-2      	; 0x27b6 <__stop_program>
